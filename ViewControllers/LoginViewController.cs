// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Electrolux.ShopFloor.Mvvm.ViewModels;
using GalaSoft.MvvmLight.Helpers;
using System.Diagnostics;
using ObjCRuntime;

namespace Electrolux.ShopFloor.iOS.ViewControllers
{
    public partial class LoginViewController : BaseViewController<LoginViewModel>
    {
		public LoginViewController(IntPtr handle) : base(handle)
        {
            this.ViewModel.PropertyChanged += ViewModel_PropertyChanged;
        }

        private void ViewModel_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            var viewModel = (LoginViewModel)sender;

            switch (e.PropertyName)
            {
                case "Version":
                    versionNumberLabel.Text = viewModel.Version;
                    break;
                case "ErrorMessage":
                    errorMessageLabel.Text = viewModel.ErrorMessage;
                    break;
                case "IsBusy":
                    setupActivityIndicator.Hidden = !viewModel.IsBusy;
                    break;
                case "Status":
                    messageLabel.Text = viewModel.Status;
                    break;
                case "Progress":
                    ProgressChanged(viewModel.Progress);
                    break;
            }
        }

        private void ProgressChanged(int viewModelProgress)
        {
            if (viewModelProgress == 0)
            {
                return;
            }

            this.setupProgressView.Hidden = false;

            //float progress = (float)((float)viewModelProgress) / ((float)100);
            float progress = viewModelProgress / ((float)100);

            this.setupProgressView.SetProgress(progress, true);
        }

        public override void RegisterBindings()
        {
			this.KeepBindingInMemoryLocal(new Binding<string, string>(this, () => this.usernameTextField.Text, ViewModel, () => ViewModel.Username));
			this.KeepBindingInMemoryLocal(new Binding<string, string>(this, () => this.passwordTextField.Text, ViewModel, () => ViewModel.Password));
			this.KeepBindingInMemoryLocal(new Binding<string, string>(ViewModel, () => ViewModel.Version, this, () => this.versionNumberLabel.Text));
			this.KeepBindingInMemoryLocal(new Binding<bool, bool>(ViewModel, () => ViewModel.IsStaging, this, () => this.isStagingLabel.Hidden)
			                              .ConvertSourceToTarget((arg) => !arg));
		}

		public override void RegisterCommands()
		{
            this.loginButton.SetCommand(this.ViewModel.LoginCommand);
            this.resetPasswordButton.SetCommand(this.ViewModel.ResetPasswordCommand);
		}

		#region UITextFieldDelegate

		[Export("textFieldShouldReturn:")]
		public bool ShouldReturn(UITextField textField)
		{
			var nextTag = textField.Tag + 1;
			UIView nextResponder = textField.Superview.ViewWithTag(nextTag);
			if (nextResponder != null)
			{
				if (nextResponder.GetType() == typeof(UITextField))
				{
					nextResponder.BecomeFirstResponder();
				} else if (nextResponder.GetType() == typeof(UIButton))
				{
					textField.ResignFirstResponder();
					UIButton button = nextResponder as UIButton;
					button.SendActionForControlEvents(UIControlEvent.TouchUpInside);
				}
			} else
			{
				textField.ResignFirstResponder();
			}
			return false;
		}

		#endregion
	}
}
