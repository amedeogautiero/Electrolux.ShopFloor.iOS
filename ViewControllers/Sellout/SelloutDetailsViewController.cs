// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Timers;
using CoreGraphics;
using Electrolux.ShopFloor.iOS.ViewControllers;
using Electrolux.ShopFloor.Middleware.Manager;
using Electrolux.ShopFloor.Mvvm.ViewModels.EditingAreas;
using Electrolux.ShopFloor.Mvvm.ViewModels.Units;
using Foundation;
using GalaSoft.MvvmLight.Helpers;
using UIKit;

namespace Electrolux.ShopFloor.iOS
{
	public partial class SelloutDetailsViewController : ListDetailBaseViewController<SoldProductsViewModel>
	{
		private PopoverViewController<ModelProductSetUnit> modelProductSetPopoverController;
		private PopoverViewController<PncModelUnit> pncPopoverController;
		private Timer pncTimer;
		private Timer modelTimer;

		public SelloutDetailsViewController(IntPtr handle) : base(handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			pncTimer = new Timer(1000);
			pncTimer.AutoReset = false;
			pncTimer.Elapsed += (object sender, ElapsedEventArgs e) =>
			{
				InvokeOnMainThread(() =>
				{
					this.AreaViewModel.Pnc = this.pncTextField.Text;
				});
			};

			modelTimer = new Timer(1000);
			modelTimer.AutoReset = false;
			modelTimer.Elapsed += (object sender, ElapsedEventArgs e) =>
			{
				InvokeOnMainThread(() =>
				{
					this.AreaViewModel.Model = this.modelProductSetTextField.Text;
				});
			};
		}

		public override void ViewDidDisappear(bool animated)
		{
			base.ViewDidDisappear(animated);
			pncTimer.Stop();
			modelTimer.Stop();
		}

		public override void Translations()
		{
			this.modelProductSetLabel.Text = TranslatorManager.GetInstance().GetString("Model/Product Set");
			this.pncLabel.Text = TranslatorManager.GetInstance().GetString("PNC");
			this.quantityLabel.Text = TranslatorManager.GetInstance().GetString("Quantity");
			this.priceLabel.Text = TranslatorManager.GetInstance().GetString("Price");
			this.inEvidenceLabel.Text = TranslatorManager.GetInstance().GetString("On Display");
			this.inStockLabel.Text = TranslatorManager.GetInstance().GetString("On Stock");
			this.soldUsingIPadLabel.Text = TranslatorManager.GetInstance().GetString("Sold using iPad");

			this.modelProductSetTextField.Placeholder = TranslatorManager.GetInstance().GetString("Mandatory");
			this.quantityTextField.Placeholder = TranslatorManager.GetInstance().GetString("Mandatory");

			this.inEvidenceSegmentedControl.SetTitle(TranslatorManager.GetInstance().GetString("NO"), 0);
			this.inEvidenceSegmentedControl.SetTitle(TranslatorManager.GetInstance().GetString("YES"), 1);

			this.inStockSegmentedControl.SetTitle(TranslatorManager.GetInstance().GetString("NO"), 0);
			this.inStockSegmentedControl.SetTitle(TranslatorManager.GetInstance().GetString("YES"), 1);

			this.soldUsingIPadSegmentedControl.SetTitle(TranslatorManager.GetInstance().GetString("NO"), 0);
			this.soldUsingIPadSegmentedControl.SetTitle(TranslatorManager.GetInstance().GetString("YES"), 1);
		}

		public override void ConfigureArea()
		{
			base.ConfigureArea();

			#region Behaviors

			#region Model/ProductSet

			this.modelProductSetTextField.ShouldChangeCharacters += (textField, range, replacementString) =>
			{
				var newContent = new NSString(textField.Text).Replace(range, new NSString(replacementString)).ToString();
				if (newContent.Length > this.AreaViewModel.ApplicationController.SearchThreshold)
				{
					modelProductSetPopoverController.ShowPopover(this.modelProductSetTextField);
				}
				else
				{
					modelProductSetPopoverController.DismissPopover();
				}
				return true;
			};

			modelProductSetPopoverController = new PopoverViewController<ModelProductSetUnit>(
				this.AreaViewModel.Models,
				new CGSize(this.modelProductSetTextField.Frame.Size.Width, 320f),
				"ModelProductSetTableViewCell",
				UIPopoverArrowDirection.Left,
				(UITableViewCell cell) =>
				{
					if (cell is ModelProductSetTableViewCell)
					{
						this.AreaViewModel.Model = ((ModelProductSetTableViewCell)cell).Item.Text;
						this.AreaViewModel.SelectedModel = ((ModelProductSetTableViewCell)cell).Item;
						this.modelProductSetTextField.ResignFirstResponder();
					}
					modelProductSetPopoverController.DismissPopover();
				}
			);

			#endregion

			#region PNC

			this.pncTextField.ShouldChangeCharacters += (textField, range, replacementString) =>
			{
				var newContent = new NSString(textField.Text).Replace(range, new NSString(replacementString)).ToString();
				if (newContent.Length > this.AreaViewModel.ApplicationController.SearchThreshold)
				{
					if (!pncPopoverController.IsPopoverShown)
					{
						pncPopoverController.ShowPopover(this.pncTextField);
					}
				}
				else
				{
					pncPopoverController.DismissPopover();
				}
				return true;
			};

			pncPopoverController = new PopoverViewController<PncModelUnit>(
				this.AreaViewModel.Pncs,
				new CGSize(this.pncTextField.Frame.Size.Width, 320f),
				"PncViewCell",
				UIPopoverArrowDirection.Any,
				(UITableViewCell cell) =>
				{
					if (cell is PncViewCell)
					{
						this.AreaViewModel.SelectedPnc = ((PncViewCell)cell).Item;
						this.AreaViewModel.CloseSuggestions();
						this.pncTextField.ResignFirstResponder();
					}
				}
			);

			#endregion

			#endregion
		}

		public override void RegisterBindingsLocal()
		{
			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.Model, this, () => this.modelProductSetTextField.Text));
			KeepBindingInMemoryLocal(new Binding<string, string>(this, () => this.modelProductSetTextField.Text).WhenSourceChanges(() =>
			{
				modelTimer.Start();
			}));

			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.Pnc, this, () => this.pncTextField.Text));
			KeepBindingInMemoryLocal(new Binding<string, string>(this, () => this.pncTextField.Text).WhenSourceChanges(() =>
			{
				pncTimer.Start();
			}));

			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.Quantity, this, () => this.quantityTextField.Text, BindingMode.TwoWay));
			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.Price, this, () => this.priceTextField.Text, BindingMode.TwoWay));

			KeepBindingInMemoryLocal(new Binding<bool, bool>(this.AreaViewModel, () => this.AreaViewModel.IsPncListOpen)
			                         .WhenSourceChanges(() =>
			{
				if (pncPopoverController != null)
				{
					if (this.AreaViewModel.IsPncListOpen)
					{
						pncPopoverController.ShowPopover(this.pncTextField);
					}
					else
					{
						pncPopoverController.DismissPopover();
					}
				}
			}));

			KeepBindingInMemoryLocal(new Binding<bool, bool>(this.AreaViewModel, () => this.AreaViewModel.IsSearchingForPNC)
									 .WhenSourceChanges(() =>
			{
				if (this.AreaViewModel.IsSearchingForPNC)
				{
					this.StartAsync();
				}
				else
				{
					this.EndAsync();
				}
			}));

			this.KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.InEvidence).WhenSourceChanges(() =>
			{
				this.inEvidenceSegmentedControl.SelectedSegment = (this.AreaViewModel.InEvidence) ? 1 : 0;
			}));

			this.KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.InStock).WhenSourceChanges(() =>
			{
				this.inStockSegmentedControl.SelectedSegment = (this.AreaViewModel.InStock) ? 1 : 0;
			}));

			this.KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.SoldUsingIPad).WhenSourceChanges(() =>
			{
				this.soldUsingIPadSegmentedControl.SelectedSegment = (this.AreaViewModel.SoldUsingIPad) ? 1 : 0;
			}));

			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.ModelWarnMessage).WhenSourceChanges(() =>
			{
				if (!String.IsNullOrWhiteSpace(this.AreaViewModel.ModelWarnMessage))
				{
					this.modelProductSetMessageLabel.Text = this.AreaViewModel.ModelWarnMessage;
				}
			}));

			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.ModelErrorMessage, this, () => this.modelProductSetMessageLabel.Text));
			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.PncErrorMessage, this, () => this.pncMessageLabel.Text, BindingMode.OneWay));
			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.QuantityErrorMessage, this, () => this.quantityMessageLabel.Text, BindingMode.TwoWay));
			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.PriceErrorMessage, this, () => this.priceMessageLabel.Text, BindingMode.TwoWay));
		}

		partial void inEvidenceValueChanged(Foundation.NSObject sender)
		{
			this.AreaViewModel.InEvidence = (this.inEvidenceSegmentedControl.SelectedSegment == 1);
		}

		partial void inStockValueChanged(Foundation.NSObject sender)
		{
			this.AreaViewModel.InStock = (this.inStockSegmentedControl.SelectedSegment == 1);
		}

		partial void soldUsingIPadValueChanged(Foundation.NSObject sender)
		{
			this.AreaViewModel.SoldUsingIPad = (this.soldUsingIPadSegmentedControl.SelectedSegment == 1);
		}
	}
}
