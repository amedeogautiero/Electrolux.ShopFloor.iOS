// This file has been autogenerated from a class added in the UI designer.

using System;
using Electrolux.ShopFloor.iOS.ViewControllers;
using Electrolux.ShopFloor.Middleware.Manager;
using Electrolux.ShopFloor.Mvvm.ViewModels.EditingAreas;
using Electrolux.ShopFloor.Mvvm.ViewModels.Units;
using Foundation;
using UIKit;

namespace Electrolux.ShopFloor.iOS
{
	public partial class SelloutViewController : ListBaseViewController<SoldProductsViewModel, SoldProductUnit>
	{
		public SelloutViewController (IntPtr handle) : base (handle)
		{
		}

		protected override string CellName
		{
			get
			{
				return "SelloutTableViewCell";
			}
		}

		public override void Translations()
		{
			this.modelProductSetHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Model/Product Set");
			this.pncHeaderLabel.Text = TranslatorManager.GetInstance().GetString("PNC");
			this.quantityHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Quantity");
			this.priceHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Price");
			this.inEvidenceHeaderLabel.Text = TranslatorManager.GetInstance().GetString("On Display");
			this.inStockHeaderLabel.Text = TranslatorManager.GetInstance().GetString("On Stock");
		}

		public override void BindTaskCell(UITableViewCell cell, SoldProductUnit item, NSIndexPath path)
		{
			base.BindTaskCell(cell, item, path);

			SelloutTableViewCell listCell = cell as SelloutTableViewCell;

			listCell.ModelProductSetLabel.Text = item.Model;
			listCell.PncLabel.Text = item.Pnc;
			listCell.QuantityLabel.Text = (item.Unit.Qty.HasValue) ? item.Unit.Qty.Value.ToString() : "";
			listCell.PriceLabel.Text = (item.Unit.Price.HasValue) ? item.Unit.Price.Value.ToString() : "";
			listCell.InEvidenceLabel.Text = item.InEvidence;
			listCell.InStockLabel.Text = item.InStock;
		}
	}
}
