// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using Electrolux.ShopFloor.iOS.ViewControllers;
using Electrolux.ShopFloor.Middleware.Manager;
using Electrolux.ShopFloor.Mvvm.ViewModels;
using Electrolux.ShopFloor.Mvvm.ViewModels.EditingAreas;
using Electrolux.ShopFloor.Mvvm.ViewModels.Units;
using Foundation;
using GalaSoft.MvvmLight.Helpers;
using UIKit;
using System.Collections.Generic;

namespace Electrolux.ShopFloor.iOS
{
	public partial class ElectroluxActivitiesDetailsViewController : ListDetailBaseViewController<ElectroluxActivitiesViewModel>
	{

		private PopoverViewController<ModelCategoryUnit> modelCategoryPopoverController;
		private PopoverViewController<BrandUnit> brandPopoverController;
		private PopoverViewController<ActivityModelUnit> activityPopoverController;
		private PopoverViewController<ReasonModelUnit> reasonPopoverController;
		private PopoverViewController<TimeSpanModelUnit> timeSpentPopoverController;
		private PopoverViewController<ActivityModelUnit> posmPopoverController;
		private PopoverViewController<ActivityModelUnit> specialPlacementsPopoverController;

		private string SpecPlacementsLabelText { get { return TranslatorManager.GetInstance().GetString("Special Placement"); } }
		private string PosmLabelText { get { return TranslatorManager.GetInstance().GetString("POSM"); } }

		public ElectroluxActivitiesDetailsViewController(IntPtr handle) : base(handle)
		{
		}

		protected override UIKit.UITextView[] TextViewArray()
		{
			return new UITextView[] { this.descriptionTextView };
		}

		public override void Translations()
		{
			this.modelProductSetCategoryLabel.Text = TranslatorManager.GetInstance().GetString("Model/Product Set/Category");
			this.brandLabel.Text = TranslatorManager.GetInstance().GetString("Brand");
			this.activityLabel.Text = TranslatorManager.GetInstance().GetString("Electrolux Activities");
			this.reasonLabel.Text = TranslatorManager.GetInstance().GetString("Store Reason");
			this.timespentLabel.Text = TranslatorManager.GetInstance().GetString("Time Spent");
			this.descriptionLabel.Text = TranslatorManager.GetInstance().GetString("Description");

			this.modelProductSetCategoryTextField.Placeholder = TranslatorManager.GetInstance().GetString("Mandatory");
			this.brandTextField.Placeholder = TranslatorManager.GetInstance().GetString("Mandatory");
			this.activityTextField.Placeholder = TranslatorManager.GetInstance().GetString("Mandatory");
			this.reasonTextField.Placeholder = TranslatorManager.GetInstance().GetString("Mandatory");
			this.timespentTextField.Placeholder = TranslatorManager.GetInstance().GetString("Mandatory");
			this.posmTextField.Placeholder = TranslatorManager.GetInstance().GetString("Mandatory");
			this.specPlacementTextField.Placeholder = TranslatorManager.GetInstance().GetString("Mandatory");
		}

		public override void ConfigureArea()
		{

			base.ConfigureArea();

			#region Behaviors

			//this.descriptionTextView.Delegate = this;

			#region Model/ProductSet/Category

			this.modelProductSetCategoryTextField.ShouldChangeCharacters += (textField, range, replacementString) =>
			{
				var newContent = new NSString(textField.Text).Replace(range, new NSString(replacementString)).ToString();
				if (newContent.Length > this.AreaViewModel.ApplicationController.SearchThreshold)
				{
					modelCategoryPopoverController.ShowPopover(this.modelProductSetCategoryTextField);
				}
				else
				{
					modelCategoryPopoverController.DismissPopover();
				}
				return true;
			};


			this.modelCategoryPopoverController = new PopoverViewController<ModelCategoryUnit>(
				this.AreaViewModel.Models,
				new CGSize(this.modelProductSetCategoryTextField.Frame.Size.Width, 320f),
				"ModelCategoryTableViewCell",
				UIPopoverArrowDirection.Left,
				(UITableViewCell cell) =>
				{
					if (cell is ModelCategoryTableViewCell)
					{
						ModelCategoryUnit item = ((ModelCategoryTableViewCell)cell).Item;
						this.AreaViewModel.Model = item.Text;
						this.AreaViewModel.SelectedModel = item;
						this.modelProductSetCategoryTextField.ResignFirstResponder();
					}
					this.modelCategoryPopoverController.DismissPopover();
				}
			);

			#endregion

			#region Brand

			this.brandTextField.ShouldChangeCharacters += (textField, range, replacementString) =>
			{
				var newContent = new NSString(textField.Text).Replace(range, new NSString(replacementString)).ToString();
				if (newContent.Length > this.AreaViewModel.ApplicationController.SearchThreshold)
				{
					brandPopoverController.ShowPopover(this.brandTextField);
				}
				else
				{
					brandPopoverController.DismissPopover();
				}
				return true;
			};

			this.brandPopoverController = new PopoverViewController<BrandUnit>(
				this.AreaViewModel.Brands,
				new CGSize(this.brandTextField.Frame.Size.Width, 320f),
				"BrandTableViewCell",
				UIPopoverArrowDirection.Right,
				(UITableViewCell cell) =>
				{
					if (cell is BrandTableViewCell)
					{
						this.AreaViewModel.SelectedBrandModel = ((BrandTableViewCell)cell).Item;

						this.brandPopoverController.DismissPopover();
						this.brandTextField.ResignFirstResponder();
					}
				}
			);

			#endregion

			#region Activity


			this.activityTextField.ShouldBeginEditing += (UITextField textField) =>
			{
				activityPopoverController.ShowPopover(textField);
				return false;
			};

			activityPopoverController = new PopoverViewController<ActivityModelUnit>(
				this.AreaViewModel.Activities,
				new CGSize(this.activityTextField.Frame.Size.Width, 320f),
				"ActivityViewCell",
				UIPopoverArrowDirection.Any,
				(UITableViewCell cell) =>
				{
					if (cell is ActivityViewCell)
					{
						this.AreaViewModel.SelectedActivity = ((ActivityViewCell)cell).Item;

						activityPopoverController.DismissPopover();
						posmPopoverController.DismissPopover();
						specialPlacementsPopoverController.DismissPopover();

						this.posmTextField.Text = "";
						this.specPlacementTextField.Text = "";
						this.placeholderLabel.Text = "";
						this.placeholderLabel.Hidden = true;
						this.posmTextField.Hidden = true;
						this.specPlacementTextField.Hidden = true;

						if (this.AreaViewModel.HasSpecialPlacements == true)
						{
							this.placeholderLabel.Text = SpecPlacementsLabelText;
							this.placeholderLabel.Hidden = false;
							this.specPlacementTextField.Hidden = false;

							this.posmTextField.Hidden = true;
						}
						else if (this.AreaViewModel.IsPosmAction == true)
						{
							this.placeholderLabel.Text = PosmLabelText;
							this.placeholderLabel.Hidden = false;
							this.posmTextField.Hidden = false;
							this.specPlacementTextField.Hidden = true;
						}

					}
				}
			);

			#endregion

			#region Special Placements / POSM Activities

			this.posmTextField.ShouldBeginEditing += (UITextField textField) =>
			{
				posmPopoverController.ShowPopover(textField);
				return false;
			};

			this.specPlacementTextField.ShouldBeginEditing += (UITextField textField) =>
			{
				specialPlacementsPopoverController.ShowPopover(textField);
				return false;
			};

			posmPopoverController = new PopoverViewController<ActivityModelUnit>(
				this.AreaViewModel.Posms,
				new CGSize(this.posmTextField.Frame.Size.Width, 320f),
				"ActivityViewCell",
				UIPopoverArrowDirection.Any,
				(UITableViewCell cell) =>
				{
					if (cell is ActivityViewCell)
					{
						this.AreaViewModel.SelectedSpecialPlacement = null;
						this.AreaViewModel.SelectedPosm = ((ActivityViewCell)cell).Item;

						posmPopoverController.DismissPopover();
					}
				}
			);

			specialPlacementsPopoverController = new PopoverViewController<ActivityModelUnit>(
				this.AreaViewModel.SpecialPlacements,
				new CGSize(this.specPlacementTextField.Frame.Size.Width, 320f),
				"ActivityViewCell",
				UIPopoverArrowDirection.Any,
				(UITableViewCell cell) =>
				{
					if (cell is ActivityViewCell)
					{
						this.AreaViewModel.SelectedPosm = null;
						this.AreaViewModel.SelectedSpecialPlacement = ((ActivityViewCell)cell).Item;

						specialPlacementsPopoverController.DismissPopover();
					}
				}
			);

			#endregion

			#region Reason

			this.reasonTextField.ShouldBeginEditing += (UITextField textField) =>
			{
				reasonPopoverController.ShowPopover(textField);
				return false;
			};

			reasonPopoverController = new PopoverViewController<ReasonModelUnit>(
				this.AreaViewModel.Reasons,
				new CGSize(this.reasonTextField.Frame.Size.Width, 320f),
				"ReasonViewCell",
				UIPopoverArrowDirection.Any,
				(UITableViewCell cell) =>
				{
					if (cell is ReasonViewCell)
					{
						this.AreaViewModel.SelectedReason = ((ReasonViewCell)cell).Item;

						reasonPopoverController.DismissPopover();
					}
				}
			);

			#endregion

			#region TimeSpent

			this.timespentTextField.ShouldBeginEditing += (UITextField textField) =>
			{
				timeSpentPopoverController.ShowPopover(textField);
				return false;
			};

			timeSpentPopoverController = new PopoverViewController<TimeSpanModelUnit>(
				this.AreaViewModel.SpentTimes,
				new CGSize(this.timespentTextField.Frame.Size.Width, 320f),
				"TimeSpentViewCell",
				UIPopoverArrowDirection.Any,
				(UITableViewCell cell) =>
				{
					if (cell is TimeSpentViewCell)
					{
						this.AreaViewModel.SelectedSpentTime = ((TimeSpentViewCell)cell).Item;

						timeSpentPopoverController.DismissPopover();
					}
				}
			);

			#endregion

			#endregion
		}

		public override void RegisterBindingsLocal()
		{
			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.Model, this, () => this.modelProductSetCategoryTextField.Text, BindingMode.TwoWay));
			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.ModelErrorMessage, this, () => this.modelProductSetCategoryMessageLabel.Text));
			KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.ModelWarnMessage).WhenSourceChanges(() =>
			{
				if (!String.IsNullOrWhiteSpace(this.AreaViewModel.ModelWarnMessage))
				{
					this.modelProductSetCategoryMessageLabel.Text = this.AreaViewModel.ModelWarnMessage;
				}
			}));

			KeepBindingInMemoryLocal(new Binding<bool, bool>(this.AreaViewModel, () => this.AreaViewModel.CanEditBrandModel, this, () => this.brandTextField.UserInteractionEnabled, BindingMode.TwoWay));
			KeepBindingInMemoryLocal(new Binding<bool, bool>(this.AreaViewModel, () => this.AreaViewModel.CanEditModel, this, () => this.modelProductSetCategoryTextField.UserInteractionEnabled, BindingMode.TwoWay));

			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.BrandName, this, () => this.brandTextField.Text, BindingMode.TwoWay));
			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.BrandErrorMessage, this, () => this.brandMessageLabel.Text));

			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.SelectedActivity.Text, this, () => this.activityTextField.Text, BindingMode.OneWay));
			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.ActivityErrorMessage, this, () => this.activityMessageLabel.Text));

			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.SelectedReason.Text, this, () => this.reasonTextField.Text, BindingMode.OneWay));
			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.ReasonErrorMessage, this, () => this.reasonMessageLabel.Text));

			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.SelectedSpentTime.Text, this, () => this.timespentTextField.Text, BindingMode.OneWay));
			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.SpentTimeErrorMessage, this, () => this.timespentMessageLabel.Text));

			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.Description, this, () => this.descriptionTextView.Text, BindingMode.TwoWay));

			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.SelectedPosm.Text, this, () => this.posmTextField.Text, BindingMode.OneWay));

			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.SelectedSpecialPlacement.Text, this, () => this.specPlacementTextField.Text, BindingMode.OneWay));

			KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.HasSpecialPlacements).WhenSourceChanges(() =>
			{
				this.specPlacementTextField.Hidden = (this.AreaViewModel.HasSpecialPlacements == false);

				if (this.AreaViewModel.HasSpecialPlacements)
				{
					this.placeholderLabel.Text = SpecPlacementsLabelText;

					this.placeholderLabel.Hidden = false;
				}

				if (!this.AreaViewModel.HasSpecialPlacements && !this.AreaViewModel.IsPosmAction)
				{
					this.placeholderLabel.Hidden = true;
				}
			}));

			KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.IsPosmAction).WhenSourceChanges(() =>
			{
				this.posmTextField.Hidden = (this.AreaViewModel.IsPosmAction == false);

				if (this.AreaViewModel.IsPosmAction)
				{
					this.placeholderLabel.Text = PosmLabelText;

					this.placeholderLabel.Hidden = false;
				}
			}));

			KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.SpecialPlacementErrorMessage, this, () => this.placeholderMessageLabel.Text));
			//KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.POSMErrorMessage, this, () => this.placeholderMessageLabel.Text));
		}

	}
}
