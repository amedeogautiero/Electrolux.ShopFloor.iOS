// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using Electrolux.ShopFloor.iOS.ViewControllers;
using Electrolux.ShopFloor.Middleware.Manager;
using Electrolux.ShopFloor.Mvvm.ViewModels;
using Electrolux.ShopFloor.Mvvm.ViewModels.Units;
using Foundation;
using GalaSoft.MvvmLight.Helpers;
using UIKit;
using System.Linq;

namespace Electrolux.ShopFloor.iOS
{
	public partial class AnalyticsModelVariationsViewController : BaseViewController<ModelVariationsViewModel>, IUITableViewDataSource
	{
		private PopoverViewController<string> storePopoverController;

		public AnalyticsModelVariationsViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewWillAppear(bool animated)
		{
			this.NavigationController.SetNavigationBarHidden(false, false);
			this.ConfigureArea();
			base.ViewWillAppear(animated);
		}

		public override void ViewWillDisappear(bool animated)
		{
			this.NavigationController.SetNavigationBarHidden(true, true);
			base.ViewWillDisappear(animated);
		}

		public override void RegisterBindingsLocal()
		{
			if (ViewModel != null)
			{
				this.KeepBindingInMemoryLocal(this.SetBinding(() => ViewModel.CanEdit, () => this.storeTextField.UserInteractionEnabled));
				this.KeepBindingInMemoryLocal(this.SetBinding(() => ViewModel.ShopName, () => this.storeTextField.Text, BindingMode.TwoWay));

				this.KeepBindingInMemoryLocal(this.SetBinding(() => ViewModel.IsInheritedList)
											  .WhenSourceChanges(() =>
				{
					this.inheritedListSegmentedControl.SelectedSegment = (ViewModel.IsInheritedList) ? 0 : 1;
				}));

				this.KeepBindingInMemoryLocal(this.SetBinding(() => ViewModel.IsNotInheritedList)
											  .WhenSourceChanges(() =>
				{
					this.inheritedListSegmentedControl.SelectedSegment = (ViewModel.IsNotInheritedList) ? 1 : 0;
				}));

				this.KeepBindingInMemoryLocal(this.SetBinding(() => ViewModel.IsEma)
											  .WhenSourceChanges(() =>
				{
					this.productTypologySegmentedControl.SelectedSegment = (ViewModel.IsEma) ? 0 : 1;
				}));

				this.KeepBindingInMemoryLocal(this.SetBinding(() => ViewModel.IsEsa)
											  .WhenSourceChanges(() =>
				{
					this.productTypologySegmentedControl.SelectedSegment = (ViewModel.IsEsa) ? 1 : 0;
				}));

				this.KeepBindingInMemoryLocal(new Binding<bool, bool>(ViewModel, () => ViewModel.IsBusy)
							  .WhenSourceChanges(() =>
				{
					if (ViewModel.IsBusy)
						this.StartAsync();
					else
						this.EndAsync();
				}));

				this.KeepBindingInMemoryLocal(new Binding<bool, bool>(ViewModel, () => ViewModel.CanEdit)
			  				.WhenSourceChanges(() =>
				{
					if (ViewModel.CanEdit)
					{
						if (this.modelVariationTableView.DataSource == null)
						{
							this.modelVariationTableView.DataSource = this;
						}
						this.modelVariationTableView.ReloadData();
					}
				}));
			}
		}

		partial void inheritedListValueChanged(Foundation.NSObject sender)
		{
			ViewModel.IsInheritedList = (this.inheritedListSegmentedControl.SelectedSegment == 0);
			ViewModel.IsNotInheritedList = (this.inheritedListSegmentedControl.SelectedSegment == 1);
		}

		partial void productTypologyValueChanged(Foundation.NSObject sender)
		{
			ViewModel.IsEsa = (this.productTypologySegmentedControl.SelectedSegment == 1);
			ViewModel.IsEma = (this.productTypologySegmentedControl.SelectedSegment == 0);
		}

		public override void ConfigureArea()
		{
			base.ConfigureArea();

			#region translations

			this.productTypologyLabel.Text = TranslatorManager.GetInstance().GetString("Product Typology");
			this.inheritedListLabel.Text = TranslatorManager.GetInstance().GetString("Inherited List");
			this.storeLabel.Text = TranslatorManager.GetInstance().GetString("Store");

			this.inheritedListSegmentedControl.SetTitle(TranslatorManager.GetInstance().GetString("YES"), 0);
			this.inheritedListSegmentedControl.SetTitle(TranslatorManager.GetInstance().GetString("NO"), 1);

			this.productTypologySegmentedControl.SetTitle(TranslatorManager.GetInstance().GetString("EMA"), 0);
			this.productTypologySegmentedControl.SetTitle(TranslatorManager.GetInstance().GetString("ESA"), 1);

			this.statusHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Status");
			this.starProductsHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Star Product");
			this.modelHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Model");
			this.productGroupHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Product Group");
			this.brandHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Brand");

			#endregion

			#region store

			this.storeTextField.ShouldChangeCharacters = (textField, range, replacementString) =>
			{
				var newContent = new NSString(textField.Text).Replace(range, new NSString(replacementString)).ToString();
				if (newContent.Length > ViewModel.ApplicationController.SearchThreshold)
				{
					storePopoverController.ShowPopover(this.storeTextField);
				}
				else {
					storePopoverController.DismissPopover();
				}
				return true;
			};

			storePopoverController = new PopoverViewController<string>(ViewModel.Stores, new CGSize(this.storeTextField.Frame.Size.Width, 320f), "BaseTableViewCell", UIPopoverArrowDirection.Up, (UITableViewCell cell) =>
			{
				if (cell is BaseTableViewCell)
				{
					ViewModel.ShopName = ((BaseTableViewCell)cell).Item;
					ViewModel.SelectedStore = ((BaseTableViewCell)cell).Item;
				}
				storePopoverController.DismissPopover();
				this.storeTextField.ResignFirstResponder();
			});

			#endregion
		}

		#region IUITableViewDataSource

		public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{
			ModelVariationsCell cell = (ModelVariationsCell)tableView.DequeueReusableCell("ModelVariationsCell", indexPath);

			if (((DataRowUnit)ViewModel.DataTable.Rows[indexPath.Row]).Data[0] != null)
			{
				cell.StatusLabel.Text = ((DataRowUnit)ViewModel.DataTable.Rows[indexPath.Row]).Data[0];
			}
			if (((DataRowUnit)ViewModel.DataTable.Rows[indexPath.Row]).Data[1] != null)
			{
				cell.StarProductLabel.Text = ((DataRowUnit)ViewModel.DataTable.Rows[indexPath.Row]).Data[1];
			}
			if (((DataRowUnit)ViewModel.DataTable.Rows[indexPath.Row]).Data[2] != null)
			{
				cell.ModelLabel.Text = ((DataRowUnit)ViewModel.DataTable.Rows[indexPath.Row]).Data[2];
			}
			if (((DataRowUnit)ViewModel.DataTable.Rows[indexPath.Row]).Data[3] != null)
			{
				cell.ProductGroupLabel.Text = ((DataRowUnit)ViewModel.DataTable.Rows[indexPath.Row]).Data[3];
			}
			if (((DataRowUnit)ViewModel.DataTable.Rows[indexPath.Row]).Data[4] != null)
			{
				cell.BrandLabel.Text = ((DataRowUnit)ViewModel.DataTable.Rows[indexPath.Row]).Data[4];
			}
			cell.BackgroundColor = (indexPath.Row % 2 == 0) ? UIColor.FromRGB(243f / 255f, 243f / 255f, 243f / 255f) : UIColor.White;

			return cell;
		}

		public nint RowsInSection(UITableView tableView, nint section)
		{
			return ViewModel.DataTable.Rows.Count();
		}

		#endregion
	}
}
