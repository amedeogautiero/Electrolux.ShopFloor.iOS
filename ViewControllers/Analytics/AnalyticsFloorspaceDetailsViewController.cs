// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using Electrolux.ShopFloor.iOS.ViewControllers;
using Electrolux.ShopFloor.Middleware.Manager;
using Electrolux.ShopFloor.Mvvm.ViewModels;
using Electrolux.ShopFloor.Mvvm.ViewModels.Units;
using Foundation;
using GalaSoft.MvvmLight.Helpers;
using UIKit;
using System.Linq;
using Syncfusion.SfDataGrid;

namespace Electrolux.ShopFloor.iOS
{
	public partial class AnalyticsFloorspaceDetailsViewController : BaseViewController<AnalysisDetailViewModel>
	{
		private SfDataGrid SfGrid;
		private PopoverViewController<string> storePopoverController;
		private bool showElectrolux = false;
		private bool showCompetitors = false;

		public Action OnRender { get; set; }

		protected bool ShowElectrolux
		{
			set
			{
				this.showElectrolux = value;
				this.UpdateVisibleColumns();
			}
		}

		protected bool ShowCompetitors
		{
			set
			{
				this.showCompetitors = value;
				this.UpdateVisibleColumns();
			}
		}

		private void UpdateVisibleColumns()
		{
			DataTableUnit table = ViewModel.DataTable;

			for (int i = 2; i < table.Unit.ColumnHeaders.Length; i++)
			{
				string columnType = table.Unit.ColumnHeaders[i];
				if (columnType == "Electrolux")
				{
					this.SfGrid.Columns[i].Width = this.showElectrolux ? 125f : 0f;
				}
				else if (columnType == "Competitor")
				{
					this.SfGrid.Columns[i].Width = this.showCompetitors ? 125f : 0f;
				}
			}
			this.SfGrid.SetNeedsLayout();
		}

		public AnalyticsFloorspaceDetailsViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewWillAppear(bool animated)
		{
			this.NavigationController.SetNavigationBarHidden(false, false);
			this.ConfigureArea();
			base.ViewWillAppear(animated);
		}

		public override void ViewWillDisappear(bool animated)
		{
			this.NavigationController.SetNavigationBarHidden(true, true);
			base.ViewWillDisappear(animated);
		}

		public override void RegisterBindingsLocal()
		{
			if (ViewModel != null)
			{
				this.KeepBindingInMemoryLocal(this.SetBinding(() => ViewModel.CanEdit, () => this.storeTextField.UserInteractionEnabled));
				this.KeepBindingInMemoryLocal(this.SetBinding(() => ViewModel.ShopName, () => this.storeTextField.Text, BindingMode.TwoWay));

				this.KeepBindingInMemoryLocal(this.SetBinding(() => ViewModel.IsInheritedList)
											  .WhenSourceChanges(() =>
				{
					this.inheritedListSegmentedControl.SelectedSegment = (ViewModel.IsInheritedList) ? 0 : 1;
				}));

				this.KeepBindingInMemoryLocal(this.SetBinding(() => ViewModel.IsNotInheritedList)
											  .WhenSourceChanges(() =>
				{
					this.inheritedListSegmentedControl.SelectedSegment = (ViewModel.IsNotInheritedList) ? 1 : 0;
				}));

				this.KeepBindingInMemoryLocal(this.SetBinding(() => ViewModel.IsEma)
											  .WhenSourceChanges(() =>
				{
					this.productTypologySegmentedControl.SelectedSegment = (ViewModel.IsEma) ? 0 : 1;
				}));

				this.KeepBindingInMemoryLocal(this.SetBinding(() => ViewModel.IsEsa)
											  .WhenSourceChanges(() =>
				{
					this.productTypologySegmentedControl.SelectedSegment = (ViewModel.IsEsa) ? 1 : 0;
				}));

				this.KeepBindingInMemoryLocal(new Binding<bool, bool>(ViewModel, () => ViewModel.IsBusy)
							  .WhenSourceChanges(() =>
				{
					if (ViewModel.IsBusy)
						this.StartAsync();
					else
						this.EndAsync();
				}));
			}
		}

		partial void inheritedListValueChanged(Foundation.NSObject sender)
		{
			ViewModel.IsInheritedList = (this.inheritedListSegmentedControl.SelectedSegment == 0);
			ViewModel.IsNotInheritedList = (this.inheritedListSegmentedControl.SelectedSegment == 1);
		}

		partial void productTypologyValueChanged(Foundation.NSObject sender)
		{
			ViewModel.IsEsa = (this.productTypologySegmentedControl.SelectedSegment == 1);
			ViewModel.IsEma = (this.productTypologySegmentedControl.SelectedSegment == 0);
		}

		partial void showCompetitorsBrandsAction(Foundation.NSObject sender)
		{
			if (ViewModel.ToggleCompetitorsCommand.CanExecute(null))
			{
				ViewModel.ToggleCompetitorsCommand.Execute(null);
			}
		}

		partial void showElectroluxBrandsAction(Foundation.NSObject sender)
		{
			if (ViewModel.ToggleElectroluxCommand.CanExecute(null))
			{
				ViewModel.ToggleElectroluxCommand.Execute(null);
			}
		}

		public override void ConfigureArea()
		{
			base.ConfigureArea();

			#region translations

			this.productTypologyLabel.Text = TranslatorManager.GetInstance().GetString("Product Typology");
			this.inheritedListLabel.Text = TranslatorManager.GetInstance().GetString("Inherited List");
			this.storeLabel.Text = TranslatorManager.GetInstance().GetString("Store");

			this.inheritedListSegmentedControl.SetTitle(TranslatorManager.GetInstance().GetString("YES"), 0);
			this.inheritedListSegmentedControl.SetTitle(TranslatorManager.GetInstance().GetString("NO"), 1);

			this.productTypologySegmentedControl.SetTitle(TranslatorManager.GetInstance().GetString("EMA"), 0);
			this.productTypologySegmentedControl.SetTitle(TranslatorManager.GetInstance().GetString("ESA"), 1);

			#endregion

			#region store

			this.storeTextField.ShouldChangeCharacters = (textField, range, replacementString) =>
			{
				var newContent = new NSString(textField.Text).Replace(range, new NSString(replacementString)).ToString();
				if (newContent.Length > ViewModel.ApplicationController.SearchThreshold)
				{
					storePopoverController.ShowPopover(this.storeTextField);
				}
				else {
					storePopoverController.DismissPopover();
				}
				return true;
			};

			storePopoverController = new PopoverViewController<string>(ViewModel.Stores, new CGSize(this.storeTextField.Frame.Size.Width, 320f), "BaseTableViewCell", UIPopoverArrowDirection.Up, (UITableViewCell cell) =>
			{
				if (cell is BaseTableViewCell)
				{
					ViewModel.ShopName = ((BaseTableViewCell)cell).Item;
					ViewModel.SelectedStore = ((BaseTableViewCell)cell).Item;
				}
				storePopoverController.DismissPopover();
				this.storeTextField.ResignFirstResponder();
			});

			#endregion

			#region SfDataGrid

			this.SfGrid = new SfDataGrid();
			this.SfGrid.SelectionMode = SelectionMode.None;
			this.SfGrid.AutoGenerateColumns = false;
			this.SfGrid.FrozenColumnsCount = 1;
			this.SfGrid.ShowRowHeader = false;
			this.SfGrid.HeaderRowHeight = 55;
			this.SfGrid.RowHeight = 35;
			this.SfGrid.GridStyle = new HeaderGridStyle();
			this.SfGrid.Frame = new CGRect(new CGPoint(0f, 0f), this.gridPlaceholderView.Frame.Size);

			this.gridPlaceholderView.AddSubview(this.SfGrid);

			this.ViewModel.ToggleElectrolux = () =>
			{
				this.ShowElectrolux = !this.showElectrolux;
			};

			this.ViewModel.ToggleCompetitors = () =>
			{
				this.ShowCompetitors = !this.showCompetitors;
			};

			this.ViewModel.DataRender = () =>
			{
				int index = 0;
				this.SfGrid.Columns.Clear();
				foreach (string header in ViewModel.DataTable.ColumnHeaders)
				{
					string mappingName = $"Values[{index}]";

					GridTextColumn column = new GridTextColumn()
					{
						HeaderText = header,
						MappingName = mappingName,
						HeaderTextAlignment = UITextAlignment.Center,
						HeaderFont = UIFont.FromName("ElectroluxSans-SemiBold", 16)
					};

					if (index == 0)
					{
						column.Width = 250;
						column.UserCellType = typeof(ProductGroupCell);
					}
					else
					{
						column.Width = 125;
						column.UserCellType = typeof(AnalysisCell);
					}

					this.SfGrid.Columns.Add(column);
					index++;
				}

				if (this.SfGrid.ItemsSource == null)
				{
					this.SfGrid.ItemsSource = ViewModel.DataTable.Rows;
				}

				this.UpdateVisibleColumns();
			};

			#endregion
		}
	}

	#region Column Header Style 

	public class HeaderGridStyle : DataGridStyle
	{
		public HeaderGridStyle()
		{
		}

		public override UIColor GetHeaderBackgroundColor()
		{
			return UIColor.White;
			//return UIColor.FromRGB(29, 32, 81);
		}

		public override UIColor GetHeaderForegroundColor()
		{
			return UIColor.DarkTextColor;
		}

		public override UIColor GetAlternatingRowBackgroundColor()
		{
			return UIColor.FromRGB(230, 230, 230);
		}

		public override UIColor GetSelectionBackgroundColor()
		{
			return UIColor.FromRGB(72, 173, 170);
		}

		public override UIColor GetSelectionForegroundColor()
		{
			return UIColor.FromRGB(29, 32, 81);
		}

		public override UIColor GetCaptionSummaryRowBackgroundColor()
		{
			return UIColor.FromRGB(224, 224, 224);
		}

		public override UIColor GetCaptionSummaryRowForeGroundColor()
		{
			return UIColor.FromRGB(51, 51, 51);
		}

		public override UIColor GetBordercolor()
		{
			return UIColor.FromRGB(180, 180, 180);
		}

		//		public override int GetHeaderSortIndicatorDown ()
		//		{
		//			return Resource.Drawable.SortingDown;
		//		}
		//
		//		public override int GetHeaderSortIndicatorUp ()
		//		{
		//			return Resource.Drawable.SortingUp;
		//		}
	}

	#endregion

	#region SfDatGrid Custom Cells

	public class ProductGroupCell : GridCell
	{
		UILabel stocktext;

		public ProductGroupCell()
		{
			stocktext = new UILabel();
			stocktext.Font = UIFont.FromName("ElectroluxSans-Regular", 14);
			stocktext.TextAlignment = UITextAlignment.Left;
			this.Add(stocktext);
			this.CanRenderUnLoad = false;
		}

		protected override void UnLoad()
		{
			this.RemoveFromSuperview();
		}

		public override void Draw(CoreGraphics.CGRect rect)
		{
			this.stocktext.TextColor = DataColumn.Renderer.DataGrid.GridStyle.GetRecordForegroundColor();
			this.stocktext.Text = ((DataRowValue)DataColumn.CellValue).Value;
			if (((DataRowUnit)DataColumn.RowData).IsSummaryRow)
			{
				this.BackgroundColor = UIColor.FromRGB(200, 200, 200);
				this.stocktext.Font = UIFont.FromName("ElectroluxSans-SemiBold", 14);
			}
			base.Draw(rect);
		}

		public override void LayoutSubviews()
		{
			base.LayoutSubviews();

			this.stocktext.Frame = new CoreGraphics.CGRect(35, this.Bounds.Top, this.Bounds.Width, this.Bounds.Height);
			this.stocktext.Text = ((DataRowValue)DataColumn.CellValue).Value;
			if (((DataRowUnit)DataColumn.RowData).IsSummaryRow)
			{
				this.BackgroundColor = UIColor.FromRGB(200, 200, 200);
				this.stocktext.Font = UIFont.FromName("ElectroluxSans-SemiBold", 14);
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (stocktext != null)
			{
				stocktext.Dispose();
				stocktext = null;
			}

			base.Dispose(disposing);
		}
	}

	public class AnalysisCell : GridCell
	{
		private UILabel stocktext;
		private UIStringAttributes redColorTextAttributes, greenColorTextAttributes;

		public AnalysisCell()
		{
			stocktext = new UILabel();
			stocktext.Font = UIFont.FromName("ElectroluxSans-Regular", 14);
			stocktext.TextAlignment = UITextAlignment.Left;
			this.Add(stocktext);
			this.CanRenderUnLoad = false;

			redColorTextAttributes = new UIStringAttributes
			{
				ForegroundColor = UIColor.Red
			};
			greenColorTextAttributes = new UIStringAttributes
			{
				ForegroundColor = UIColor.FromRGB(0, 100, 0)
			};
		}

		protected override void UnLoad()
		{
			this.RemoveFromSuperview();
		}

		public override void Draw(CoreGraphics.CGRect rect)
		{
			this.stocktext.TextColor = DataColumn.Renderer.DataGrid.GridStyle.GetRecordForegroundColor();
			this.stocktext.AttributedText = formatAttributedString(((DataRowValue)DataColumn.CellValue).Value, ((DataRowValue)DataColumn.CellValue).Percent);
			if (((DataRowUnit)DataColumn.RowData).IsSummaryRow)
			{
				this.BackgroundColor = UIColor.FromRGB(200, 200, 200);
				this.stocktext.Font = UIFont.FromName("ElectroluxSans-SemiBold", 14);
			}
			base.Draw(rect);
		}

		public override void LayoutSubviews()
		{
			base.LayoutSubviews();

			this.stocktext.Frame = new CoreGraphics.CGRect(35, this.Bounds.Top, this.Bounds.Width, this.Bounds.Height);
			this.stocktext.AttributedText = formatAttributedString(((DataRowValue)DataColumn.CellValue).Value, ((DataRowValue)DataColumn.CellValue).Percent);
			if (((DataRowUnit)DataColumn.RowData).IsSummaryRow)
			{
				this.BackgroundColor = UIColor.FromRGB(200, 200, 200);
				this.stocktext.Font = UIFont.FromName("ElectroluxSans-SemiBold", 14);
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (stocktext != null)
			{
				stocktext.Dispose();
				stocktext = null;
			}
			base.Dispose(disposing);
		}

		private NSAttributedString formatAttributedString(string baseString, string percentString)
		{
			NSMutableAttributedString baseFormattedString, percentFormattedString;

			baseFormattedString = new NSMutableAttributedString(baseString);
			if (!string.IsNullOrEmpty(percentString))
			{
				if (percentString.Contains("+"))
				{
					percentFormattedString = new NSMutableAttributedString(" " + percentString, greenColorTextAttributes);
					baseFormattedString.Append(percentFormattedString);
				}
				else if (percentString.Contains("-"))
				{
					percentFormattedString = new NSMutableAttributedString(" " + percentString, redColorTextAttributes);
					baseFormattedString.Append(percentFormattedString);
				}
			}
			return baseFormattedString;
		}

	}

	#endregion
}
