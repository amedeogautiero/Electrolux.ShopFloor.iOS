// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using Electrolux.ShopFloor.iOS.ViewControllers;
using Electrolux.ShopFloor.Middleware.Manager;
using Electrolux.ShopFloor.Mvvm.ViewModels;
using Electrolux.ShopFloor.Mvvm.ViewModels.Units;
using Foundation;
using GalaSoft.MvvmLight.Helpers;
using UIKit;
using System.Linq;

namespace Electrolux.ShopFloor.iOS
{
	public partial class AnalyticsFloorspaceViewController : BaseViewController<AnalysisViewModel>, IUITableViewDataSource
	{
		private PopoverViewController<string> storePopoverController;
		private UIStringAttributes redColorTextAttributes, greenColorTextAttributes;

		public AnalyticsFloorspaceViewController(IntPtr handle) : base(handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();
			redColorTextAttributes = new UIStringAttributes
			{
				ForegroundColor = UIColor.Red
			};
			greenColorTextAttributes = new UIStringAttributes
			{
				ForegroundColor = UIColor.FromRGB(0, 100, 0)
			};
		}

		public override void ViewWillAppear(bool animated)
		{
			this.NavigationController.SetNavigationBarHidden(false, false);
			this.ConfigureArea();
			base.ViewWillAppear(animated);
		}

		public override void ViewWillDisappear(bool animated)
		{
			this.NavigationController.SetNavigationBarHidden(true, true);
			base.ViewWillDisappear(animated);
		}

		public override void RegisterBindingsLocal()
		{
			if (ViewModel != null)
			{
				this.KeepBindingInMemoryLocal(this.SetBinding(() => ViewModel.CanEdit, () => this.storeTextField.UserInteractionEnabled));
				this.KeepBindingInMemoryLocal(this.SetBinding(() => ViewModel.ShopName, () => this.storeTextField.Text, BindingMode.TwoWay));
				this.KeepBindingInMemoryLocal(this.SetBinding(() => ViewModel.PreviousReportDate, () => this.previousReportLabel.Text));

				this.KeepBindingInMemoryLocal(this.SetBinding(() => ViewModel.IsInheritedList)
											  .WhenSourceChanges(() =>
				{
					this.inheritedListSegmentedControl.SelectedSegment = (ViewModel.IsInheritedList) ? 0 : 1;
				}));

				this.KeepBindingInMemoryLocal(this.SetBinding(() => ViewModel.IsNotInheritedList)
											  .WhenSourceChanges(() =>
				{
					this.inheritedListSegmentedControl.SelectedSegment = (ViewModel.IsNotInheritedList) ? 1 : 0;
				}));

				this.KeepBindingInMemoryLocal(this.SetBinding(() => ViewModel.IsEma)
											  .WhenSourceChanges(() =>
				{
					this.productTypologySegmentedControl.SelectedSegment = (ViewModel.IsEma) ? 0 : 1;
				}));

				this.KeepBindingInMemoryLocal(this.SetBinding(() => ViewModel.IsEsa)
											  .WhenSourceChanges(() =>
				{
					this.productTypologySegmentedControl.SelectedSegment = (ViewModel.IsEsa) ? 1 : 0;
				}));

				this.KeepBindingInMemoryLocal(new Binding<bool, bool>(ViewModel, () => ViewModel.IsBusy)
							  .WhenSourceChanges(() =>
				{
					if (ViewModel.IsBusy)
						this.StartAsync();
					else
						this.EndAsync();
				}));
				                                 
				this.KeepBindingInMemoryLocal(new Binding<bool, bool>(ViewModel, () => ViewModel.HasPrevious)
							  .WhenSourceChanges(() =>
				{
					if (ViewModel.HasPrevious)
					{
						this.previousReportNoDataView.Hidden = true;
						if (this.previousReportTableView.DataSource == null)
						{
							this.previousReportTableView.DataSource = this;
						}
					}
					else
					{
						this.View.BringSubviewToFront(this.previousReportNoDataView);
						this.previousReportNoDataView.Hidden = false;
					}
					this.previousReportTableView.ReloadData();
				}));

				this.KeepBindingInMemoryLocal(new Binding<bool, bool>(ViewModel, () => ViewModel.HasLast)
							  .WhenSourceChanges(() =>
				{
					if (ViewModel.HasLast)
					{
						this.comparisonNoDataView.Hidden = true;
						if (this.comparisonTableView.DataSource == null)
						{
							this.comparisonTableView.DataSource = this;
						}
					}
					else
					{
						this.View.BringSubviewToFront(this.comparisonNoDataView);
						this.comparisonNoDataView.Hidden = false;
					}
					this.comparisonTableView.ReloadData();
				}));
			}
		}

		partial void inheritedListValueChanged(Foundation.NSObject sender)
		{
			ViewModel.IsInheritedList = (this.inheritedListSegmentedControl.SelectedSegment == 0);
			ViewModel.IsNotInheritedList = (this.inheritedListSegmentedControl.SelectedSegment == 1);
		}

		partial void productTypologyValueChanged(Foundation.NSObject sender)
		{
			ViewModel.IsEsa = (this.productTypologySegmentedControl.SelectedSegment == 1);
			ViewModel.IsEma = (this.productTypologySegmentedControl.SelectedSegment == 0);
		}

		partial void analyticsButtonAction(Foundation.NSObject sender)
		{
			if (ViewModel.KitchenAnalysisCommand.CanExecute(null))
			{
				ViewModel.KitchenAnalysisCommand.Execute(null);
			}
		}

		partial void modelVariationsButtonAction(Foundation.NSObject sender)
		{
			if (ViewModel.ModelVariationsCommand.CanExecute(null))
			{
				ViewModel.ModelVariationsCommand.Execute(null);
			}
		}

		partial void previousReportDetailsAction(Foundation.NSObject sender)
		{
			if (ViewModel.DetailForPreviousCommand.CanExecute(null))
			{
				ViewModel.DetailForPreviousCommand.Execute(null);
			}
		}

		partial void comparisonShowDetailsAction(Foundation.NSObject sender)
		{
			if (ViewModel.DetailForLastCommand.CanExecute(null))
			{
				ViewModel.DetailForLastCommand.Execute(null);
			}
		}

		public override void ConfigureArea()
		{
			base.ConfigureArea();

			#region translations

			this.productTypologyLabel.Text = TranslatorManager.GetInstance().GetString("Product Typology");
			this.inheritedListLabel.Text = TranslatorManager.GetInstance().GetString("Inherited List");
			this.storeLabel.Text = TranslatorManager.GetInstance().GetString("Store");
			this.previousReportLabel.Text = TranslatorManager.GetInstance().GetString("Previous report");
			this.comparisonLabel.Text = TranslatorManager.GetInstance().GetString("Comparison with last inserted report");
			this.comparisonNoDatLabel.Text = TranslatorManager.GetInstance().GetString("No Data");
			this.previousReportNoDataLabel.Text = TranslatorManager.GetInstance().GetString("No Data");

			this.inheritedListSegmentedControl.SetTitle(TranslatorManager.GetInstance().GetString("YES"), 0);
			this.inheritedListSegmentedControl.SetTitle(TranslatorManager.GetInstance().GetString("NO"), 1);

			this.productTypologySegmentedControl.SetTitle(TranslatorManager.GetInstance().GetString("EMA"), 0);
			this.productTypologySegmentedControl.SetTitle(TranslatorManager.GetInstance().GetString("ESA"), 1);

			this.previousReportShowDetailsButton.SetTitle(TranslatorManager.GetInstance().GetString("Show details"), UIControlState.Normal);
			this.comparisonShowDetailsButton.SetTitle(TranslatorManager.GetInstance().GetString("Show details"), UIControlState.Normal);

			#endregion

			#region store

			this.storeTextField.ShouldChangeCharacters = (textField, range, replacementString) =>
			{
				var newContent = new NSString(textField.Text).Replace(range, new NSString(replacementString)).ToString();
				if (newContent.Length > ViewModel.ApplicationController.SearchThreshold)
				{
					storePopoverController.ShowPopover(this.storeTextField);
				}
				else {
					storePopoverController.DismissPopover();
				}
				return true;
			};

			storePopoverController = new PopoverViewController<string>(ViewModel.Stores, new CGSize(this.storeTextField.Frame.Size.Width, 320f), "BaseTableViewCell", UIPopoverArrowDirection.Up, (UITableViewCell cell) =>
			{
				if (cell is BaseTableViewCell)
				{
					ViewModel.ShopName = ((BaseTableViewCell)cell).Item;
					ViewModel.SelectedStore = ((BaseTableViewCell)cell).Item;
				}
				storePopoverController.DismissPopover();
				this.storeTextField.ResignFirstResponder();
			});

			#endregion
		}

		#region UITableViewDataSource

		public nint RowsInSection(UITableView tableView, nint section)
		{
			if (tableView == this.previousReportTableView)
				return ViewModel.PreviousDataTable.Rows.Count();
			else if (tableView == this.comparisonTableView)
				return ViewModel.LastDataTable.Rows.Count();
			return 0;
		}

		public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{
			if (tableView == this.previousReportTableView)
			{
				AnalyticsPreviousReportDataRowCell cell = (AnalyticsPreviousReportDataRowCell)tableView.DequeueReusableCell("AnalyticsPreviousReportDataRowCell", indexPath);
				cell.ProductGroupLabel.Text = ((DataRowUnit)ViewModel.PreviousDataTable.Rows[indexPath.Row]).Data[0];
				cell.StarProductLabel.Text = ((DataRowUnit)ViewModel.PreviousDataTable.Rows[indexPath.Row]).Data[1];
				cell.TotalElectroluxLabel.Text = ((DataRowUnit)ViewModel.PreviousDataTable.Rows[indexPath.Row]).Data[2];
				cell.TotalOtherLabel.Text = ((DataRowUnit)ViewModel.PreviousDataTable.Rows[indexPath.Row]).Data[3];
				cell.TotalOverallLabel.Text = ((DataRowUnit)ViewModel.PreviousDataTable.Rows[indexPath.Row]).Data[4];
                if (((DataRowUnit)ViewModel.PreviousDataTable.Rows[indexPath.Row]).IsSummaryRow)
                {
                    cell.BackgroundColor = UIColor.FromRGB(210f / 255f, 210f / 255f, 210f / 255f);
                }
                else
                {
                    cell.PercentOverTotalLabel.Text = ((DataRowUnit)ViewModel.PreviousDataTable.Rows[indexPath.Row]).Data[5];
                    cell.BackgroundColor = (indexPath.Row % 2 == 0) ? UIColor.FromRGB(243f / 255f, 243f / 255f, 243f / 255f) : UIColor.White;
                }
				return cell;
			}
			else if (tableView == this.comparisonTableView)
			{
				AnalyticsComparisonDataRowCell cell = (AnalyticsComparisonDataRowCell)tableView.DequeueReusableCell("AnalyticsComparisonDataRowCell", indexPath);
				cell.ProductGroupLabel.Text = ((DataRowUnit)ViewModel.LastDataTable.Rows[indexPath.Row]).Data[0];
				cell.StarProductLabel.AttributedText = formatAttributedString(((DataRowUnit)ViewModel.LastDataTable.Rows[indexPath.Row]).Data[1], 
				                                                              ((DataRowUnit)ViewModel.LastDataTable.Rows[indexPath.Row]).Percent[1]);
				cell.TotalElectroluxLabel.AttributedText = formatAttributedString(((DataRowUnit)ViewModel.LastDataTable.Rows[indexPath.Row]).Data[2],
																			  ((DataRowUnit)ViewModel.LastDataTable.Rows[indexPath.Row]).Percent[2]);
				cell.TotalOtherLabel.AttributedText = formatAttributedString(((DataRowUnit)ViewModel.LastDataTable.Rows[indexPath.Row]).Data[3],
																			  ((DataRowUnit)ViewModel.LastDataTable.Rows[indexPath.Row]).Percent[3]);
				cell.TotalOverallLabel.AttributedText = formatAttributedString(((DataRowUnit)ViewModel.LastDataTable.Rows[indexPath.Row]).Data[4],
																			  ((DataRowUnit)ViewModel.LastDataTable.Rows[indexPath.Row]).Percent[4]);
                if (((DataRowUnit)ViewModel.LastDataTable.Rows[indexPath.Row]).IsSummaryRow)
                    cell.BackgroundColor = UIColor.FromRGB(210f / 255f, 210f / 255f, 210f / 255f);
                else
                {
                    cell.PercentOverTotalLabel.Text = ((DataRowUnit)ViewModel.LastDataTable.Rows[indexPath.Row]).Data[5];
                    cell.BackgroundColor = (indexPath.Row % 2 == 0) ? UIColor.FromRGB(243f / 255f, 243f / 255f, 243f / 255f) : UIColor.White;
                }
				return cell;
			}
			return null;
		}

		private NSAttributedString formatAttributedString(string baseString, string percentString)
		{
			NSMutableAttributedString baseFormattedString, percentFormattedString;

			baseFormattedString = new NSMutableAttributedString(baseString);
			if (percentString.Contains("+"))
			{
				percentFormattedString = new NSMutableAttributedString(" " + percentString, greenColorTextAttributes);
				baseFormattedString.Append(percentFormattedString);
			}
			else if (percentString.Contains("-"))
			{
				percentFormattedString = new NSMutableAttributedString(" " + percentString, redColorTextAttributes);
				baseFormattedString.Append(percentFormattedString);
			}
			return baseFormattedString;
		}

		#endregion
	}
}
