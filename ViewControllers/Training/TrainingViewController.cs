// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using Electrolux.ShopFloor.iOS.ViewControllers;
using Electrolux.ShopFloor.Middleware.Manager;
using Electrolux.ShopFloor.Mvvm.ViewModels.EditingAreas;
using Electrolux.ShopFloor.Mvvm.ViewModels.Units;
using Foundation;
using GalaSoft.MvvmLight.Helpers;
using UIKit;

namespace Electrolux.ShopFloor.iOS
{
	public partial class TrainingViewController : DetailBaseViewController<TrainingViewModel>
	{
		private PopoverViewController<RegTrainingModelUnit> trainingModelPopoverController;
		private PopoverViewController<RegTrainingTypeModelUnit> trainingTypePopoverController;
		private PopoverViewController<RegTrainingTimeModelUnit> trainingTimePopoverController;
		private PopoverViewController<RegTrainingAudienceModelUnit> trainingAudiencePopoverController;

		public TrainingViewController (IntPtr handle) : base (handle)
		{
		}

		protected override UIKit.UITextView[] TextViewArray()
		{
			return new UITextView[] { this.descriptionTextView };
		}

		public override void RegisterBindingsLocal()
		{
			base.RegisterBindingsLocal();

			if (this.AreaViewModel != null)
			{
				KeepBindingInMemoryLocal(new Binding<string, string>(
					this.AreaViewModel,
					() => this.AreaViewModel.SelectedTrainingMethod.Text,
					this,
					() => this.methodTextField.Text,
					BindingMode.OneWay));
				
				KeepBindingInMemoryLocal(new Binding<string, string>(
					this.AreaViewModel,
					() => this.AreaViewModel.SelectedTrainingType.Text,
					this,
					() => this.trainingTypeTextField.Text,
					BindingMode.OneWay));

				KeepBindingInMemoryLocal(new Binding<string, string>(
					this.AreaViewModel,
					() => this.AreaViewModel.SelectedTrainingAudience.Text,
					this,
					() => this.audienceTextField.Text,
					BindingMode.OneWay));

				KeepBindingInMemoryLocal(new Binding<string, string>(
					this.AreaViewModel,
					() => this.AreaViewModel.SelectedSpentTime.Text,
					this,
					() => this.timeSpentTextField.Text,
					BindingMode.OneWay));

				KeepBindingInMemoryLocal(new Binding<string, string>(
					this.AreaViewModel,
					() => this.AreaViewModel.TotalPartecipants,
					this,
					() => this.numberOfParticipantsTextField.Text,
					BindingMode.TwoWay));

				KeepBindingInMemoryLocal(new Binding<string, string>(
					this.AreaViewModel,
					() => this.AreaViewModel.Description,
					this,
					() => this.descriptionTextView.Text,
					BindingMode.TwoWay));


				KeepBindingInMemoryLocal(new Binding<bool, bool>(
					this.AreaViewModel,
					() => this.AreaViewModel.CanEditTraining,
					this,
					() => this.trainingTypeTextField.UserInteractionEnabled,
					BindingMode.TwoWay));

				KeepBindingInMemoryLocal(new Binding<bool, bool>(
					this.AreaViewModel,
					() => this.AreaViewModel.CanEditTraining,
					this,
					() => this.audienceTextField.UserInteractionEnabled,
					BindingMode.TwoWay));

				KeepBindingInMemoryLocal(new Binding<bool, bool>(
					this.AreaViewModel,
					() => this.AreaViewModel.CanEditTraining,
					this,
					() => this.timeSpentTextField.UserInteractionEnabled,
					BindingMode.TwoWay));

				KeepBindingInMemoryLocal(new Binding<bool, bool>(
					this.AreaViewModel,
					() => this.AreaViewModel.CanEditTraining,
					this,
					() => this.numberOfParticipantsTextField.UserInteractionEnabled,
					BindingMode.TwoWay));


				KeepBindingInMemoryLocal(new Binding<bool, bool>(
					this.AreaViewModel,
					() => this.AreaViewModel.CanEditTraining,
					this,
					() => this.descriptionTextView.UserInteractionEnabled,
					BindingMode.TwoWay));


				KeepBindingInMemoryLocal(new Binding<string, string>(
					this.AreaViewModel,
					() => this.AreaViewModel.TrainingMethodErrorMessage,
					this,
					() => this.methodMessage.Text,
					BindingMode.TwoWay));

				KeepBindingInMemoryLocal(new Binding<string, string>(
					this.AreaViewModel,
					() => this.AreaViewModel.TrainingTypeErrorMessage,
					this,
					() => this.trainingTypeMessage.Text,
					BindingMode.TwoWay));

				KeepBindingInMemoryLocal(new Binding<string, string>(
					this.AreaViewModel,
					() => this.AreaViewModel.TrainingAudienceErrorMessage,
					this,
					() => this.audienceMessage.Text,
					BindingMode.TwoWay));

				KeepBindingInMemoryLocal(new Binding<string, string>(
					this.AreaViewModel,
					() => this.AreaViewModel.TotalPartecipantsErrorMessage,
					this,
					() => this.numberOfParticipantsMessage.Text,
					BindingMode.TwoWay));

				KeepBindingInMemoryLocal(new Binding<string, string>(
					this.AreaViewModel,
					() => this.AreaViewModel.SpentTimeErrorMessage,
					this,
					() => this.timeSpentMessage.Text,
					BindingMode.TwoWay));
			}
		}

		public override void Translations()
		{
			this.methodLabel.Text = TranslatorManager.GetInstance().GetString("Training Method");
			this.trainingTypeLabel.Text = TranslatorManager.GetInstance().GetString("Battleground Categories");
			this.audienceLabel.Text = TranslatorManager.GetInstance().GetString("Brand");
			this.timeSpentLabel.Text = TranslatorManager.GetInstance().GetString("Time Spent");
			this.numberOfParticipantsLabel.Text = TranslatorManager.GetInstance().GetString("Number Of Participants");
			this.descriptionLabel.Text = TranslatorManager.GetInstance().GetString("Description");
			this.methodTextField.Placeholder = TranslatorManager.GetInstance().GetString("Mandatory");
		}

		public override void ConfigureArea()
		{
			base.ConfigureArea();

			//this.descriptionTextView.Delegate = this;

			#region Training Method

			this.methodTextField.ShouldBeginEditing += (UITextField textField) =>
			{
				trainingModelPopoverController.ShowPopover(textField);
				return false;
			};

			trainingModelPopoverController = new PopoverViewController<RegTrainingModelUnit>(
				this.AreaViewModel.TrainingMethods,
				new CGSize(this.methodTextField.Frame.Size.Width, 120f),
				"TrainingModelViewCell",
				UIPopoverArrowDirection.Any,
				(UITableViewCell cell) =>
				{
					if (cell is TrainingModelViewCell)
					{
						this.AreaViewModel.SelectedTrainingMethod = ((TrainingModelViewCell)cell).Item;
						trainingModelPopoverController.DismissPopover();
					}
				}
			);

			#endregion

			#region Training Main Focus ex Training Types

			this.trainingTypeTextField.ShouldBeginEditing += (UITextField textField) =>
			{
				trainingTypePopoverController.ShowPopover(textField);
				return false;
			};

			trainingTypePopoverController = new PopoverViewController<RegTrainingTypeModelUnit>(
				this.AreaViewModel.TrainingTypes,
				new CGSize(this.methodTextField.Frame.Size.Width, 120f),
				"TrainingTypeViewCell",
				UIPopoverArrowDirection.Any,
				(UITableViewCell cell) =>
				{
					if (cell is TrainingTypeViewCell)
					{
						this.AreaViewModel.SelectedTrainingType = ((TrainingTypeViewCell)cell).Item;
						trainingTypePopoverController.DismissPopover();
					}
				}
			);

			#endregion

			#region Training Audience

			this.audienceTextField.ShouldBeginEditing += (UITextField textField) =>
			{
				trainingAudiencePopoverController.ShowPopover(textField);
				return false;
			};

			trainingAudiencePopoverController = new PopoverViewController<RegTrainingAudienceModelUnit>(
				this.AreaViewModel.TrainingAudiences,
				new CGSize(this.methodTextField.Frame.Size.Width, 120f),
				"TrainingAudienceViewCell",
				UIPopoverArrowDirection.Any,
				(UITableViewCell cell) =>
				{
					if (cell is TrainingAudienceViewCell)
					{
						this.AreaViewModel.SelectedTrainingAudience = ((TrainingAudienceViewCell)cell).Item;
						trainingAudiencePopoverController.DismissPopover();
					}
				}
			);

			#endregion

			#region Training Time

			this.timeSpentTextField.ShouldBeginEditing += (UITextField textField) =>
			{
				trainingTimePopoverController.ShowPopover(textField);
				return false;
			};

			trainingTimePopoverController = new PopoverViewController<RegTrainingTimeModelUnit>(
				this.AreaViewModel.SpentTimes,
				new CGSize(this.methodTextField.Frame.Size.Width, 120f),
				"TrainingTimeViewCell",
				UIPopoverArrowDirection.Any,
				(UITableViewCell cell) =>
				{
					if (cell is TrainingTimeViewCell)
					{
						this.AreaViewModel.SelectedSpentTime = ((TrainingTimeViewCell)cell).Item;
						trainingTimePopoverController.DismissPopover();
					}
				}
			);

			#endregion
		}
	}
}
