// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Diagnostics;
using CoreGraphics;
using Electrolux.ShopFloor.iOS.ViewControllers;
using Electrolux.ShopFloor.Middleware.Manager;
using Electrolux.ShopFloor.Mvvm.ViewModels.EditingAreas;
using Electrolux.ShopFloor.Mvvm.ViewModels.Units;
using Foundation;
using GalaSoft.MvvmLight.Helpers;
using UIKit;

namespace Electrolux.ShopFloor.iOS
{
	public partial class FloorspaceCompetitorsDetailsViewController : ListDetailBaseViewController<CompetitorsFloorSpaceViewModel>
	{
		private PopoverViewController<ModelCategoryModelUnit> modelCategoryPopoverController;
		private PopoverViewController<BrandUnit> brandPopoverController;
		private PopoverViewController<KitchenUnit> kitchenPopoverController;
		private PopoverViewController<ModelCategoryModelUnit> categoryPopoverController;
		private PopoverViewController<EnergyLabelUnit> oldEnergyClassPopoverController;
		private PopoverViewController<EnergyLabelUnit> updateEnergyClassPopoverController;

		public FloorspaceCompetitorsDetailsViewController (IntPtr handle) : base (handle)
		{
		}

		public override void RegisterBindingsLocal()
		{
			if (this.AreaViewModel != null)
			{
				KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.Model, this, () => this.modelTextField.Text, BindingMode.TwoWay));
				KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.ModelErrorMessage, this, () => this.modelMessageLabel.Text));
				KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.ModelWarnMessage).WhenSourceChanges(() =>
				{
                    if (!String.IsNullOrWhiteSpace(this.AreaViewModel.ModelWarnMessage))
                    {
                        this.modelMessageLabel.Text = this.AreaViewModel.ModelWarnMessage;
                    }
                }));

				KeepBindingInMemoryLocal(new Binding<bool, bool>(this.AreaViewModel, () => this.AreaViewModel.CanEditBrandModel, this, () => this.brandTextField.UserInteractionEnabled, BindingMode.TwoWay));
				KeepBindingInMemoryLocal(new Binding<bool, bool>(this.AreaViewModel, () => this.AreaViewModel.CanEditCategory, this, () => this.categoryTextField.UserInteractionEnabled, BindingMode.TwoWay));
				KeepBindingInMemoryLocal(new Binding<bool, bool>(this.AreaViewModel, () => this.AreaViewModel.CanEditModel, this, () => this.modelTextField.UserInteractionEnabled, BindingMode.TwoWay));
				//KeepBindingInMemoryLocal(new Binding<string, string>(this, () => this.modelTextField.Text)
				//	.WhenSourceChanges(() =>
				//	{
				//		if (!this.AreaViewModel.IsEditMode)
				//		{ 
				//			this.AreaViewModel.ModelConfirmed();
				//		}
				//	})
				//);

				//this.modelMessageLabel.Text = "init2";

				//this.modelTextField.AllEvents += (sender, e) =>
				//{
				//	//this.AreaViewModel?.ModelConfirmed();
				//	this.modelMessageLabel.Text = "2.AllEvents " + DateTime.Now.Ticks.ToString();
				//};


				KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.BrandName, this, () => this.brandTextField.Text, BindingMode.TwoWay));
				KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.BrandErrorMessage, this, () => this.brandMessageLabel.Text));

				KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.SelectedKitchen.Text, this, () => this.kitchenTextField.Text));

				KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.Price, this, () => this.priceTextField.Text, BindingMode.TwoWay));
				KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.PriceErrorMessage, this, () => this.priceMessageLabel.Text));

				KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.QuantityInEvidenceErrorMessage, this, () => this.qtyOnDisplayMessageLabel.Text));

				KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.QuantityInEvidence, this, () => this.qtyOnDisplayContentLabel.Text, BindingMode.TwoWay));

				KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.SelectedCategory.Text, this, () => this.categoryTextField.Text));
				KeepBindingInMemoryLocal(new Binding<string, string>(this, () => this.categoryTextField.Text)
				                         .WhenSourceChanges(() =>
				{
					if (string.IsNullOrEmpty(this.categoryTextField.Text))
					{
						this.AreaViewModel.SelectedCategory = null;
						this.AreaViewModel.SelectedModel = null;
						this.AreaViewModel.Model = null;
					}
				}));
				KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.CategoryErrorMessage, this, () => this.categoryMessageLabel.Text));

				KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.QuantityStock, this, () => this.qtyOnStockTextField.Text, BindingMode.TwoWay));
				KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.QuantityInStockErrorMessage, this, () => this.qtyOnStockMessageLabel.Text));

				KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.QuantitySpecial, this, () => this.qtySpecialPlacementTextField.Text, BindingMode.TwoWay));
				KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.QuantitySpecialErrorMessage, this, () => this.qtySpecialPlacementMessageLabel.Text));

				KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.QuantityPos, this, () => this.qtyPOSMaterialTextField.Text, BindingMode.TwoWay));
				KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.QuantityPosErrorMessage, this, () => this.qtyPOSMaterialMessageLabel.Text));

				KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.IsPromo, this, () => this.inPromotionTextField.Text, BindingMode.TwoWay));
				KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.IsPromoErrorMessage, this, () => this.inPromotionMessageLabel.Text));

				KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.SelectedOldEnergyLabel.Text, this, () => this.oldEnergyClassTextField.Text));
				KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.SelectedNewEnergyLabel.Text, this, () => this.updateEnergyClassTextField.Text));

				KeepBindingInMemoryLocal(new Binding<string, string>(this.AreaViewModel, () => this.AreaViewModel.GenericErrorMessage, this, () => this.genericErrorMessageLabel.Text));

			}
		}

		public override void DetachBindingsLocal()
		{
			ClearAndDetachBindingsLocal();
		}

		partial void qtyOnDisplayMinusAction(NSObject sender)
		{
			if (AreaViewModel.UpdateValueCommandMinus.CanExecute(null))
			{
				AreaViewModel.UpdateValueCommandMinus.Execute(null);
			}
		}

        partial void qtyOnDisplayPlusAction(NSObject sender)
        {
			if (AreaViewModel.UpdateValueCommandPlus.CanExecute(null))
			{
				AreaViewModel.UpdateValueCommandPlus.Execute(null);
			}
		}

		public override void Translations()
		{
			this.modelLabel.Text = TranslatorManager.GetInstance().GetString("Model/Category");
			this.brandLabel.Text = TranslatorManager.GetInstance().GetString("Competitor Brand");
			this.qtyOnDisplayLabel.Text = TranslatorManager.GetInstance().GetString("Quantity On Display");
			this.qtySpecialPlacementLabel.Text = TranslatorManager.GetInstance().GetString("# in special placement");
			this.qtyPOSMaterialLabel.Text = TranslatorManager.GetInstance().GetString("Quantity With POS Material");
			this.priceLabel.Text = TranslatorManager.GetInstance().GetString("Price");
			this.qtyOnStockLabel.Text = TranslatorManager.GetInstance().GetString("Quantity On Stock");
			this.categoryLabel.Text = TranslatorManager.GetInstance().GetString("Category");
			this.kitchenLabel.Text = TranslatorManager.GetInstance().GetString("Kitchen");
			this.inPromotionLabel.Text = TranslatorManager.GetInstance().GetString("Is In Promotion");
            this.oldEnergyClassLabel.Text = TranslatorManager.GetInstance().GetString("Old Energy Class");
			this.updateEnergyClassLabel.Text = TranslatorManager.GetInstance().GetString("New Energy Class");

			this.modelTextField.Placeholder = TranslatorManager.GetInstance().GetString("Mandatory");
			this.brandTextField.Placeholder = TranslatorManager.GetInstance().GetString("Mandatory");
			this.categoryTextField.Placeholder = TranslatorManager.GetInstance().GetString("Mandatory");
			this.inPromotionTextField.Placeholder = TranslatorManager.GetInstance().GetString("Mandatory");
			this.priceTextField.Placeholder = TranslatorManager.GetInstance().GetString("Mandatory");
		}

		public override void ConfigureArea()
		{
			base.ConfigureArea();

			#region Behaviors

			#region Model/Category

			this.modelTextField.ShouldChangeCharacters += (textField, range, replacementString) =>
			{
				var newContent = new NSString(textField.Text).Replace(range, new NSString(replacementString)).ToString();
				if (newContent.Length > this.AreaViewModel.ApplicationController.SearchThreshold)
				{
					modelCategoryPopoverController.ShowPopover(this.modelTextField);
				}
				else
				{
					modelCategoryPopoverController.DismissPopover();
				}
				return true;
			};

   //         this.modelTextField.Ended += (sender, e) =>
   //         {
   //             //this.AreaViewModel?.ModelConfirmed();
			//	this.modelMessageLabel.Text = "prova.Ended";
			//};
   //         this.modelTextField.AllEvents += (sender, e) =>
   //         {
   //             //this.AreaViewModel?.ModelConfirmed();
   //             this.modelMessageLabel.Text = "prova.AllEvents " + DateTime.Now.Ticks.ToString();
				

			//};

            //this.modelMessageLabel.Text = "init";

			modelCategoryPopoverController = new PopoverViewController<ModelCategoryModelUnit>(this.AreaViewModel.Models, new CGSize(this.modelTextField.Frame.Size.Width, 320f), "ModelCategoryModelTableViewCell", UIPopoverArrowDirection.Left, (UITableViewCell cell) =>
			{
				if (cell is ModelCategoryModelTableViewCell)
				{
					this.AreaViewModel.Model = ((ModelCategoryModelTableViewCell)cell).Item.Text;
					this.AreaViewModel.SelectedModel = ((ModelCategoryModelTableViewCell)cell).Item;
					this.modelTextField.ResignFirstResponder();
				}
				modelCategoryPopoverController.DismissPopover();
			});

			#endregion

			#region Brand 

			this.brandTextField.ShouldChangeCharacters += (textField, range, replacementString) =>
			{
				var newContent = new NSString(textField.Text).Replace(range, new NSString(replacementString)).ToString();
				if (newContent.Length > this.AreaViewModel.ApplicationController.SearchThreshold)
				{
					brandPopoverController.ShowPopover(this.brandTextField);
				}
				else
				{
					brandPopoverController.DismissPopover();
				}
				return true;
			};

			brandPopoverController = new PopoverViewController<BrandUnit>(this.AreaViewModel.Brands, new CGSize(this.brandTextField.Frame.Size.Width, 320f), "BrandTableViewCell", UIPopoverArrowDirection.Right, (UITableViewCell cell) =>
			{
				if (cell is BrandTableViewCell)
				{
					this.AreaViewModel.SelectedBrandModel = ((BrandTableViewCell)cell).Item;
					this.AreaViewModel.BrandName = ((BrandTableViewCell)cell).Item.Text;
					this.brandTextField.ResignFirstResponder();
				}
				brandPopoverController.DismissPopover();
			});

			#endregion

			#region Kitchen


			this.kitchenTextField.ShouldBeginEditing += (UITextField textField) =>
			{
				kitchenPopoverController.ShowPopover(textField);
				return false;
			};

			kitchenPopoverController = new PopoverViewController<KitchenUnit>(
				this.AreaViewModel.Kitchens,
				new CGSize(this.kitchenTextField.Frame.Size.Width, 320f),
				"KitchenTableViewCell",
				UIPopoverArrowDirection.Any,
				(UITableViewCell cell) =>
				{
					if (cell is KitchenTableViewCell)
					{
						this.AreaViewModel.SelectedKitchen = ((KitchenTableViewCell)cell).Item;
						kitchenPopoverController.DismissPopover();
					}
				}
			);

			#endregion

			#region Category

			this.categoryTextField.ShouldBeginEditing += (UITextField textField) =>
			{
				categoryPopoverController.ShowPopover(textField);
				return false;
			};

			categoryPopoverController = new PopoverViewController<ModelCategoryModelUnit>(
				this.AreaViewModel.Categories,
				new CGSize(this.categoryTextField.Frame.Size.Width, 320f),
				"CategoryViewCell",
				UIPopoverArrowDirection.Any,
				(UITableViewCell cell) =>
				{
					if (cell is CategoryViewCell)
					{
						this.AreaViewModel.SelectedCategory = ((CategoryViewCell)cell).Item;

						categoryPopoverController.DismissPopover();
					}
				}
			);

			#endregion

			#region OldEnergyClass

			this.oldEnergyClassTextField.ShouldBeginEditing += (UITextField textField) =>
			{
				oldEnergyClassPopoverController.ShowPopover(textField);
				return false;
			};

			oldEnergyClassPopoverController = new PopoverViewController<EnergyLabelUnit>(
                this.AreaViewModel.OldEnergyLabels,
                new CGSize(this.oldEnergyClassTextField.Frame.Size.Width, 320f),
                "EnergyClassViewCell",
                UIPopoverArrowDirection.Any,
                (UITableViewCell cell) =>
				{
                    if (cell is EnergyClassViewCell)
                    {
                        this.AreaViewModel.SelectedOldEnergyLabel = ((EnergyClassViewCell)cell).Item;

						oldEnergyClassPopoverController.DismissPopover();
					}
				}
			);

			#endregion

			#region NewEnergyClass

			this.updateEnergyClassTextField.ShouldBeginEditing += (UITextField textField) =>
			{
				updateEnergyClassPopoverController.ShowPopover(textField);
				return false;
			};

			updateEnergyClassPopoverController = new PopoverViewController<EnergyLabelUnit>(
				this.AreaViewModel.NewEnergyLabels,
				new CGSize(this.updateEnergyClassTextField.Frame.Size.Width, 320f),
				"EnergyClassViewCell",
				UIPopoverArrowDirection.Any,
				(UITableViewCell cell) =>
				{
					if (cell is EnergyClassViewCell)
					{
						this.AreaViewModel.SelectedNewEnergyLabel = ((EnergyClassViewCell)cell).Item;

						updateEnergyClassPopoverController.DismissPopover();
					}
				}
			);

			#endregion

			#endregion
		}
	}
}
