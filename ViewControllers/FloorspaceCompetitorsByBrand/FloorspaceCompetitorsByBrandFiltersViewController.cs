// This file has been autogenerated from a class added in the UI designer.

using System;
using Electrolux.ShopFloor.iOS.ViewControllers;
using Electrolux.ShopFloor.Middleware.Manager;
using Electrolux.ShopFloor.Mvvm.ViewModels.EditingAreas;
using Foundation;
using GalaSoft.MvvmLight.Helpers;
using UIKit;

namespace Electrolux.ShopFloor.iOS
{
	public partial class FloorspaceCompetitorsByBrandFiltersViewController : DetailBaseViewController<CompetitorsFloorSpace2020ViewModel>
	{
		public CompetitorsFloorSpace2020ViewModel viewModel;
		public FloorspaceCompetitorsByBrandViewController mainController;

		public FloorspaceCompetitorsByBrandFiltersViewController(IntPtr handle) : base(handle)
		{
		}

		public override async void ConfigureArea()
		{
			//await viewModel.FillBrandsAsync();
			//await viewModel.FillCategoriesAsync();
			brandsTableView.DataSource = new BrandsTableViewSource(viewModel);
			brandsTableView.Delegate = new BrandsTabeViewDelegate();
			brandsTableView.ReloadData();
			productGroupsTableView.DataSource = new ProductGroupViewSource(viewModel);
			productGroupsTableView.Delegate = new ProductGroupiewDelegate();
			productGroupsTableView.ReloadData();
			Translations();
			RegisterBindingsLocal();
		}

		public override void Translations()
		{
			this.filterButton.SetTitle(TranslatorManager.GetInstance().GetString("Filter"), UIControlState.Normal);
			this.clearFilterButton.SetTitle(TranslatorManager.GetInstance().GetString("Clear Filter"), UIControlState.Normal);
		}

		public override void RegisterBindingsLocal()
		{
			base.RegisterBindingsLocal();
			this.KeepBindingInMemoryLocalArea(this.SetBinding(() => viewModel.BrandsText, () => this.brandsHeaderLabel.Text));
			this.KeepBindingInMemoryLocalArea(this.SetBinding(() => viewModel.ProductGroupText, () => this.productGroupsHeaderLabel.Text));
			this.KeepBindingInMemoryLocalArea(this.SetBinding(() => viewModel.FilterErrorMessage, () => this.filterErrorMessageLabel.Text));
		}

        async partial void filterButtonAction(NSObject sender)
        {
			bool isBrand = true;

			if (viewModel.CheckFilters(isBrand))

			{

				await viewModel.FillGrid(isBrand);

				//Rendo la lista e l'intestazione visibile

				viewModel.SetResultsVisibility(false);

				mainController.dismissFiltersView();
			}
        }

        partial void clearFilterButtonAction(NSObject sender)
        {
			//Brands

			var listBrands = viewModel.Brands;

			foreach (var item in listBrands)

			{

				item.IsSelected = false;

			}



			//Categories

			var listCategories = viewModel.Categories;

			foreach (var item in listCategories)

			{

				item.IsSelected = false;

			}

			//Aggiorno il count delle labels

			viewModel.SetFilterBrandLabel();

			viewModel.SetFilterCategoryLabel();
		}
	}

    class BrandsTableViewSource : UITableViewDataSource
    {
		private CompetitorsFloorSpace2020ViewModel viewModel;

		public BrandsTableViewSource(CompetitorsFloorSpace2020ViewModel areaViewModel)
        {
			viewModel = areaViewModel;
        }

		public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
			FSCompetitorByBrandBrandsCell cell = (FSCompetitorByBrandBrandsCell)tableView.DequeueReusableCell("FSCompetitorByBrandBrandsCell", indexPath);

			cell.BindCell(viewModel, indexPath);
			return cell;
        }

        public override nint RowsInSection(UITableView tableView, nint section)
        {
			return viewModel.Brands.Count;
        }
    }

	class BrandsTabeViewDelegate: UITableViewDelegate
    {

    }

	class ProductGroupViewSource : UITableViewDataSource
	{
		private CompetitorsFloorSpace2020ViewModel viewModel;

		public ProductGroupViewSource(CompetitorsFloorSpace2020ViewModel areaViewModel)
		{
			viewModel = areaViewModel;
		}

		public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{
			FSCompetitorByBrandProductGroupsCell cell = (FSCompetitorByBrandProductGroupsCell)tableView.DequeueReusableCell("FSCompetitorByBrandProductGroupsCell", indexPath);

			cell.BindCell(viewModel, indexPath);
			return cell;
		}

		public override nint RowsInSection(UITableView tableView, nint section)
		{
			return viewModel.Categories.Count;
		}
	}

	class ProductGroupiewDelegate : UITableViewDelegate
	{

	}

}