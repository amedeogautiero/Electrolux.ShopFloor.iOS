// This file has been autogenerated from a class added in the UI designer.

using Electrolux.ShopFloor.iOS.ViewControllers;
using Electrolux.ShopFloor.Mvvm.ViewModels.EditingAreas;
using Electrolux.ShopFloor.Mvvm.ViewModels.Units;
using Electrolux.ShopFloor.Middleware.Manager;

using System;
using Foundation;
using UIKit;

using DRCollectionView;
using System.Linq;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Threading.Tasks;
using GalaSoft.MvvmLight.Helpers;
using System.Collections.Generic;

namespace Electrolux.ShopFloor.iOS
{
    public partial class FloorspaceCompetitorsByBrandViewController : DetailBaseViewController<CompetitorsFloorSpace2020ViewModel>
    {
        public DRCollectionViewTableLayoutManager collectionManager;
        public DRCollectionViewTableLayoutDelegate layoutDelegate;
        public DRCollectionViewTableLayout layout;

        private FloorspaceCompetitorsByBrandFiltersViewController filterController;

        public FloorspaceCompetitorsByBrandViewController (IntPtr handle) : base (handle)
		{
            
		}

        public override async void ConfigureArea()
        {
            base.ConfigureArea();
            this.StartAsync();
            this.DetailsView.Hidden = true;

            await ViewModel.InitCompetitorsFloorSpace2020();

            this.mainContentCollectionView.RegisterNibForSupplementaryView(UINib.FromName("CollectionReusableviewColumnHeader", null), (NSString)"DRCollectionViewTableLayoutSupplementaryViewColumnHeader", (NSString)"CollectionReusableviewColumnHeader");
            this.mainContentCollectionView.RegisterNibForSupplementaryView(UINib.FromName("CollectionReusableviewRowHeader", null), (NSString)"DRCollectionViewTableLayoutSupplementaryViewRowHeader", (NSString)"CollectionReusableviewRowHeader");

            this.collectionManager = new DRCollectionViewTableLayoutManager();
            this.layoutDelegate = new DRCollectionViewTableLayoutDelegate();
            this.layoutDelegate.Delegate = new MainCollectionViewManagerDelegate(AreaViewModel, this.mainContentCollectionView);
            this.collectionManager.Delegate = this.layoutDelegate.Delegate;

            this.layout = new DRCollectionViewTableLayout(@delegate: this.layoutDelegate);
            layout.HorizontalSpacing = 5;
            layout.VerticalSpacing = 5;

            this.mainContentCollectionView.SetCollectionViewLayout(this.layout, false);
            this.mainContentCollectionView.DataSource = this.collectionManager;
            this.mainContentCollectionView.Delegate = this.collectionManager;

            filterController.viewModel = this.AreaViewModel;
            filterController.mainController = this;
            filterController.ConfigureArea();
            this.EndAsync();
        }

        public override void Translations()
        {
            this.backToFiltersButton.SetTitle(TranslatorManager.GetInstance().GetString("Back To Filters"), UIControlState.Normal);
        }

        public override void RegisterBindingsLocal()
        {
            base.RegisterBindingsLocal();
            this.KeepBindingInMemoryLocalArea(this.SetBinding(() => AreaViewModel.GridErrorMessage, () => this.genericErrorMessageLabel.Text));
        }

        partial void backToFiltersAction(NSObject sender)
        {
            ViewModel.SetResultsVisibility(true);
            UIView.Animate(1, () =>
            {
                this.DetailsView.Hidden = false;
                this.View.BringSubviewToFront(this.DetailsView);
            });
        }

        public void dismissFiltersView()
        {
            UIView.Animate(1, () =>
            {
                //await ViewModel.InitCompetitorsFloorSpace2020();
                this.mainContentCollectionView.ReloadData();
                this.DetailsView.Hidden = true;
                this.View.SendSubviewToBack(this.DetailsView);
            });
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);
            if (segue.Identifier == "filtersSegue")
            {
                filterController = segue.DestinationViewController as FloorspaceCompetitorsByBrandFiltersViewController;
            }
        }

        public static implicit operator FloorspaceCompetitorsByBrandViewController(WeakReference v)
        {
            throw new NotImplementedException();
        }
    }

    class MainCollectionViewManagerDelegate : DRCollectionViewTableLayoutManagerDelegateProtocol
    {
        private CompetitorsFloorSpace2020ViewModel viewModel;
        private UICollectionView collectionView;

        public MainCollectionViewManagerDelegate(CompetitorsFloorSpace2020ViewModel areaViewModel, UICollectionView collectionView)
        {
            this.viewModel = areaViewModel;
            this.collectionView = collectionView;
        }

        private void DataSource_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.collectionView.ReloadData();

            if (e.Action == NotifyCollectionChangedAction.Add)
            {
            }
        }

        public override UICollectionViewCell CollectionViewCellForRow(UICollectionView collectionView, nuint row, nuint column, NSIndexPath indexPath)
        {
            MainCollectionCell cell = (MainCollectionCell)collectionView.DequeueReusableCell("MainCollectionCell", indexPath);
            cell.Layer.BorderColor = UIColor.LightGray.CGColor;
            cell.Layer.BorderWidth = 1.0f;
            return BindCell(cell, viewModel.Results.ToList()[(int)row], column, indexPath);
        }

        public UICollectionViewCell BindCell(MainCollectionCell cell, FloorSpaceCompetitor2020Unit item, nuint column, NSIndexPath indexPath)
        {
            if (cell.Bindings != null)
            {
                foreach (Binding binding in cell.Bindings)
                {
                    binding.Detach();
                }
                cell.Bindings.Clear();
            }
            else
            {
                cell.Bindings = new List<Binding>();
            }

            cell.qtyMinusButtonAction = (UIView sender) =>
            {
                viewModel.UpdateItem(item.Cells[(int)column], false, CompetitorsFloorSpace2020ViewModel.Quantities.QuantityInEvidence);
            };

            cell.qtyPlusButtonAction = (UIView sender) =>
            {
                viewModel.UpdateItem(item.Cells[(int)column], true, CompetitorsFloorSpace2020ViewModel.Quantities.QuantityInEvidence);
            };

            cell.qtyStockMinusButtonAction = (UIView sender) =>
            {
                viewModel.UpdateItem(item.Cells[(int)column], false, CompetitorsFloorSpace2020ViewModel.Quantities.QuantityStock);
            };

            cell.qtyStockPlusButtonAction = (UIView sender) =>
            {
                viewModel.UpdateItem(item.Cells[(int)column], true, CompetitorsFloorSpace2020ViewModel.Quantities.QuantityStock);
            };

            cell.qtyPOSMinusButtonAction = (UIView sender) =>
            {
                viewModel.UpdateItem(item.Cells[(int)column], false, CompetitorsFloorSpace2020ViewModel.Quantities.QuantityWithPosMaterial);
            };

            cell.qtyPOSPlusButtonAction = (UIView sender) =>
            {
                viewModel.UpdateItem(item.Cells[(int)column], true, CompetitorsFloorSpace2020ViewModel.Quantities.QuantityWithPosMaterial);
            };

            cell.qtyDisplayMinusButtonAction = (UIView sender) =>
            {
                viewModel.UpdateItem(item.Cells[(int)column], false, CompetitorsFloorSpace2020ViewModel.Quantities.QuantitySpecial);
            };

            cell.qtyDisplayPlusButtonAction = (UIView sender) =>
            {
                viewModel.UpdateItem(item.Cells[(int)column], true, CompetitorsFloorSpace2020ViewModel.Quantities.QuantitySpecial);
            };

            cell.Bindings.Add(new Binding<int?, string>(item.Cells[(int)column], () => item.Cells[(int)column].QuantityInEvidence, cell, () => cell.QtyLabel.Text, BindingMode.OneWay)
								  .ConvertSourceToTarget((int? arg) =>
                                   {
                                       return arg.ToString();
                                   })
								 );
            cell.Bindings.Add(new Binding<int?, string>(item.Cells[(int)column], () => item.Cells[(int)column].QuantityStock, cell, () => cell.QtyOnStockLabel.Text, BindingMode.OneWay)
                                  .ConvertSourceToTarget((int? arg) =>
                                  {
                                      return arg.ToString();
                                  })
                                 );
            cell.Bindings.Add(new Binding<int?, string>(item.Cells[(int)column], () => item.Cells[(int)column].QuantityWithPosMaterial, cell, () => cell.QtyPOSLabel.Text, BindingMode.OneWay)
                                  .ConvertSourceToTarget((int? arg) =>
                                  {
                                      return arg.ToString();
                                  })
                                 );
            cell.Bindings.Add(new Binding<int?, string>(item.Cells[(int)column], () => item.Cells[(int)column].QuantitySpecial, cell, () => cell.QtyOnDisplayLabel.Text, BindingMode.OneWay)
                                  .ConvertSourceToTarget((int? arg) =>
                                  {
                                      return arg.ToString();
                                  })
                                 );
            return cell;
        }

        public override UICollectionReusableView CollectionViewHeaderViewForColumn(UICollectionView collectionView, nuint column, NSIndexPath indexPath)
        {
            CollectionReusableviewColumnHeader view = (CollectionReusableviewColumnHeader)collectionView.DequeueReusableSupplementaryView((NSString)"DRCollectionViewTableLayoutSupplementaryViewColumnHeader", "CollectionReusableviewColumnHeader", indexPath);
            view.Layer.BorderColor = UIColor.LightGray.CGColor;
            view.Layer.BorderWidth = 1.0f;

            view.BrandLabel.Text = viewModel.ItemColumns[(int)column].LabelName;
            return view;
        }

        public override UICollectionReusableView CollectionViewHeaderViewForRow(UICollectionView collectionView, nuint row, NSIndexPath indexPath)
        {
            CollectionReusableviewRowHeader view = (CollectionReusableviewRowHeader)collectionView.DequeueReusableSupplementaryView((NSString)"DRCollectionViewTableLayoutSupplementaryViewRowHeader", "CollectionReusableviewRowHeader", indexPath);
            view.Layer.BorderColor = UIColor.LightGray.CGColor;
            view.Layer.BorderWidth = 1.0f;

            view.Translations();

            view.CategoryLabel.Text = viewModel.ItemRows[(int)row].LabelName;
            return view;
        }

        public override nuint CollectionViewNumberOfColumnsInSection(UICollectionView collectionView, nuint section)
        {
            if (section == 0)
            {
                return (nuint)viewModel.ItemColumns.Count();
            }
            return 0;
        }

        public override nuint CollectionViewNumberOfRowsInSection(UICollectionView collectionView, nuint section)
        {
            if (section == 0)
            {
                return (nuint)viewModel.ItemRows.Count();
            }
            return 0;
        }

        public override nfloat CollectionViewHeightForRow(UICollectionView collectionView, nuint row, nuint section)
        {
            return 200.0f;
        }

        public override nfloat CollectionViewWidthForColumn(UICollectionView collectionView, nuint column, nuint section)
        {
            if (section == 0)
            {
                return 160.0f;
            }

            return 0;
        }

        public override nfloat CollectionViewHeightForColumnHeaderInSection(UICollectionView collectionView, nuint section)
        {
            if (section == 0)
            {
                return 50.0f;
            }
            return 0f;
        }

        public override nfloat CollectionViewWidthForRowHeaderInSection(UICollectionView collectionView, nuint section)
        {
            if (section == 0)
            {
                return 320.0f;
            }
            return 0f;
        }

        public override bool CollectionViewStickyColumnHeadersForSection(UICollectionView collectionView, nuint section)
        {
            return true;
        }

        public override bool CollectionViewStickyRowHeadersForSection(UICollectionView collectionView, nuint section)
        {
            return true;
        }

        public override nuint NumberOfSectionsInCollectionView(UICollectionView collectionView)
        {
            return 1;
        }
    }

}

