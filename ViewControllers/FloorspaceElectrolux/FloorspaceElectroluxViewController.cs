// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using Electrolux.ShopFloor.iOS.ViewControllers;
using Electrolux.ShopFloor.Middleware.Manager;
using Electrolux.ShopFloor.Mvvm.ViewModels.EditingAreas;
using Electrolux.ShopFloor.Mvvm.ViewModels.Units;
using Foundation;
using GalaSoft.MvvmLight.Helpers;
using UIKit;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;

namespace Electrolux.ShopFloor.iOS
{
	public partial class FloorspaceElectroluxViewController : ListBaseViewController<ElectroluxFloorSpaceViewModel, FloorSpaceElectroluxUnit>
	{
		public OptionalDataPopoverController<FSElectroluxOptionalDataViewController, ElectroluxFloorSpaceSalesUnit, ElectroluxFloorSpaceViewModel> optionalDataPopoverController;
		//public List<UITextField> textFieldList;

		private PopoverViewController<ModelCategoryModelUnit> productGroupPopoverController;
		private PopoverViewController<SelectableBrandUnit> brandPopoverController;
		private ModelPopoverViewController modelPopoverController;
		private UIAlertController cleanAlertController;

		public FloorspaceElectroluxViewController(IntPtr handle) : base(handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();
			this.scrollView = this.PublicTableView;
		}

		protected override string CellName
		{
			get { return "FloorspaceElectroluxTableViewCell"; }
		}

		public override void RegisterBindingsLocal()
		{
			base.RegisterBindingsLocal();
			this.KeepBindingInMemoryLocalArea(this.SetBinding(() => AreaViewModel.CanEditBrandModel, () => this.selectBrandButton.Enabled));
			this.KeepBindingInMemoryLocalArea(this.SetBinding(() => AreaViewModel.TotalUserItems, () => this.numberOfProductCountLabel.Text)
											  .ConvertSourceToTarget((int arg) => arg.ToString()));
            this.KeepBindingInMemoryLocalArea(new Binding<bool, bool>(AreaViewModel, () => AreaViewModel.QueryIsRunning)
                                              .WhenSourceChanges(() =>
                                                {
                                                    if (AreaViewModel.QueryIsRunning)
                                                    {
                                                        this.runningQueryActivityIndicator.StartAnimating();
                                                    } else
                                                    {
														this.runningQueryActivityIndicator.StopAnimating();
													}
                                                }));
			this.KeepBindingInMemoryLocalArea(new Binding<int, int>(AreaViewModel, () => AreaViewModel.SelectedItemIndex)
			                                  .WhenSourceChanges(() => 
											  {
												  if (AreaViewModel.SelectedItemIndex >= 0)
												  {
													  NSIndexPath indexPath = NSIndexPath.FromRowSection(AreaViewModel.SelectedItemIndex, 0);
													  this.PublicTableView.ScrollToRow(indexPath, UITableViewScrollPosition.Top, true);
												  }
											  }));

			this.KeepBindingInMemoryLocal(new Binding<bool, bool>(this.AreaViewModel, () => this.AreaViewModel.IsCleaning)
			  .WhenSourceChanges(() =>
			{
				if (this.AreaViewModel.IsCleaning)
					this.StartAsync();
				else
				{
					this.PublicTableView.ReloadData();
					this.EndAsync();
				}
			}));

			this.KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.IsCleanDialogVisible)
			  .WhenSourceChanges(() =>
				{
					if (this.AreaViewModel.IsCleanDialogVisible)
					{
						//Create Alert
						cleanAlertController = UIAlertController.Create(this.AreaViewModel.CleanDialogMessage, "", UIAlertControllerStyle.Alert);
						//Add Action
						cleanAlertController.AddAction(UIAlertAction.Create(this.AreaViewModel["YES"], UIAlertActionStyle.Default, alert =>
						{
							if (this.AreaViewModel.CleanConfirmCommand.CanExecute(null))
							{
								this.cleanButton.Enabled = false;
								this.resetButton.Enabled = false;
								this.AreaViewModel.CleanConfirmCommand.Execute(null);
							}
						}));
						cleanAlertController.AddAction(UIAlertAction.Create(this.AreaViewModel["NO"], UIAlertActionStyle.Cancel, null));
						// Present Alert
						PresentViewController(cleanAlertController, true, null);
					} else
					{
						this.cleanButton.Enabled = true;
						this.resetButton.Enabled = true;
						if (cleanAlertController != null)
						{
							cleanAlertController.DismissViewController(true, null);
						}
					}
				}));
		}

		public override void Translations()
		{
			this.selectProductGroupButton.SetTitle(TranslatorManager.GetInstance().GetString("Product Group"), UIControlState.Normal);
			this.selectBrandButton.SetTitle(TranslatorManager.GetInstance().GetString("Brand"), UIControlState.Normal);
			this.selectModelButton.SetTitle(TranslatorManager.GetInstance().GetString("Model"), UIControlState.Normal);
			this.resetButton.SetTitle(TranslatorManager.GetInstance().GetString("Reset"), UIControlState.Normal);
			this.numberOfProductsLabel.Text = TranslatorManager.GetInstance().GetString("#Products:");
			this.cleanButton.SetTitle(TranslatorManager.GetInstance().GetString("Clean"), UIControlState.Normal);
		}

		//public override List<UITextField> TextFieldList
		//{
		//	get
		//	{
		//		return (this.textFieldList != null) ? this.textFieldList.ToArray() : base.TextFieldArray;
		//	}
		//}

		public override void ConfigureArea()
		{
			//base.ConfigureArea();
			this.ClearAndDetachBindingsLocalArea();
			this.RegisterBindingsLocal();

			//if (this.PublicTableView.Source == null)
			{
				this.PublicTableView.Source = new FloorspaceElectroluxTableViewSource(AreaViewModel.UserItems, this.PublicTableView, CellName, this, AreaViewModel);
				this.PublicTableView.ReloadData();
			}

			this.selectProductGroupButton.TouchUpInside += (sender, e) => { productGroupPopoverController.ShowPopover(((UIView)sender), true); };
			productGroupPopoverController = new PopoverViewController<ModelCategoryModelUnit>(
				this.AreaViewModel.CategoryModels,
				new CGSize(480f, 320f),
				"ModelCategoryModelTableViewCell",
				UIPopoverArrowDirection.Up,
				(UITableViewCell cell) =>
				{
					if (cell is ModelCategoryModelTableViewCell)
					{
						this.AreaViewModel.SelectedCategoryModel = ((ModelCategoryModelTableViewCell)cell).Item;
						this.PublicTableView.ReloadData();
					}
					productGroupPopoverController.DismissPopover();
				}
			);

			this.selectBrandButton.TouchUpInside += (sender, e) => { brandPopoverController.ShowPopover((UIView)sender, true); };
			brandPopoverController = new PopoverViewController<SelectableBrandUnit>(
				this.AreaViewModel.AllBrands,
				new CGSize(480f, 320f),
				"SelectableBrandTableViewCell",
				UIPopoverArrowDirection.Up,
				(UITableViewCell cell) =>
				{
					if (cell is SelectableBrandTableViewCell)
					{
						this.AreaViewModel.SelectedBrand = ((SelectableBrandTableViewCell)cell).Item;
						this.PublicTableView.ReloadData();
					}
					brandPopoverController.DismissPopover();
				}
			);

			this.selectModelButton.TouchUpInside += (sender, e) => { modelPopoverController.ShowPopover((UIView)sender, true); };
			this.modelPopoverController = new ModelPopoverViewController(AreaViewModel,
																		 new CGSize(480f, 250f),
																		 "FSElectroluxModelSearchViewCell",
																		 UIPopoverArrowDirection.Up,
																		 (UITableViewCell cell) =>
					{
						if (cell is FSElectroluxModelSearchViewCell)
						{
							this.AreaViewModel.SelectedFilteredModel = ((FSElectroluxModelSearchViewCell)cell).Item;
							this.PublicTableView.ReloadData();
						}
						modelPopoverController.DismissPopover();
					});

			this.resetButton.TouchUpInside += (object sender, EventArgs e) =>
			{
				if (AreaViewModel.ResetUserItemsCommand.CanExecute(null))
				{
					AreaViewModel.ResetUserItemsCommand.Execute(null);
				}
			};

			this.cleanButton.TouchUpInside += (object sender, EventArgs e) =>
			{
				if (AreaViewModel.OpenCleanDialogCommand.CanExecute(null))
				{
					AreaViewModel.OpenCleanDialogCommand.Execute(null);
				}
			};

			this.optionalDataPopoverController = new OptionalDataPopoverController<FSElectroluxOptionalDataViewController, ElectroluxFloorSpaceSalesUnit, ElectroluxFloorSpaceViewModel>(UIPopoverArrowDirection.Any, AreaViewModel);
		}
	}

	public class FloorspaceElectroluxTableViewSource : UITableViewSource
	{
		private ObservableCollection<ElectroluxFloorSpaceSalesUnit> dataSource;
		private ElectroluxFloorSpaceViewModel viewModel;
		private WeakReference wController;
		private FloorspaceElectroluxViewController ownerController { get { return wController.Target as FloorspaceElectroluxViewController; } }

		private UITableView tableView;
		private string cellName;

		public FloorspaceElectroluxTableViewSource()
		{
		}

		public FloorspaceElectroluxTableViewSource(ObservableCollection<ElectroluxFloorSpaceSalesUnit> dataSource, 
		                                           UITableView tableView, 
		                                           string cellName, 
		                                           FloorspaceElectroluxViewController ownerController,
		                                           ElectroluxFloorSpaceViewModel areaViewModel)
		{
			this.dataSource = dataSource;
			this.tableView = tableView;
			this.cellName = cellName;
			this.wController = new WeakReference(ownerController);
			this.viewModel = areaViewModel;

			if (dataSource is INotifyCollectionChanged)
			{
				((INotifyCollectionChanged)dataSource).CollectionChanged += DataSource_CollectionChanged;
			}
		}

		private void DataSource_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
		{
			if (!this.viewModel.IsCleaning)
			{
				this.tableView.ReloadData();
			}
			if (e.Action == NotifyCollectionChangedAction.Add)
			{
			}
		}

		public override nint RowsInSection(UITableView tableview, nint section)
		{
			return this.dataSource.Count();
		}

		public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{
			var cell = tableView.DequeueReusableCell(this.cellName, indexPath);
			return BindCell(cell, this.dataSource.ToList()[indexPath.Row], indexPath);
		}

		// le animazioni delle celle funzionano solo se chiamate in questo metodo del delegate
		public override void WillDisplay(UITableView tableView, UITableViewCell cell, NSIndexPath indexPath)
		{
			if (viewModel.SelectedItemIndex == indexPath.Row)
			{
				FloorspaceElectroluxTableViewCell listCell = cell as FloorspaceElectroluxTableViewCell;
				UIColor originalColor = listCell.BackgroundColor;
				UIView.Animate(1.0f, () => { cell.BackgroundColor = UIColor.FromRGB(0f, 154f, 191f); },() => 
				{ 
					cell.BackgroundColor = originalColor;
					viewModel.SelectedItemIndex = -1;
				});
			}
		}

		public UITableViewCell BindCell(UITableViewCell cell, ElectroluxFloorSpaceSalesUnit item, NSIndexPath indexPath)
		{
			//DateTime startTime = DateTime.Now;

			//Debug.WriteLine("After FloorspaceElectroluxTableViewSource.BindCell.Start " + (DateTime.Now - startTime).TotalSeconds.ToString());
			//startTime = DateTime.Now;

			if (indexPath.Row % 2 == 0)
			{
				cell.BackgroundColor = UIColor.FromRGB(243f / 255f, 243f / 255f, 243f / 255f);
				//cell.BackgroundColor = UIColor.FromRGB(218f / 255f, 223f / 255f, 225f / 255f);
			}
			else
			{
				cell.BackgroundColor = UIColor.White;
			}

			FloorspaceElectroluxTableViewCell listCell = cell as FloorspaceElectroluxTableViewCell;

			if (listCell.Bindings != null)
			{
				foreach (Binding binding in listCell.Bindings)
				{
					binding.Detach();
				}
				listCell.Bindings.Clear();
			}
			else {
				listCell.Bindings = new List<Binding>();
			}

			listCell.Translations();

			listCell.ModelLabel.Text = item.Name;
			listCell.BrandLabel.Text = item.Brand;
			listCell.CategoryLabel.Text = item.Category;

			listCell.QuantityOnDisplayTextField.Delegate = this.ownerController;
			listCell.PriceTextField.Delegate = this.ownerController;
			this.ownerController.TextFieldList.Add(listCell.QuantityOnDisplayTextField);
			this.ownerController.TextFieldList.Add(listCell.PriceTextField);

			listCell.Bindings.Add(new Binding<string, string>(item, () => item.CommandStyle)
														 .WhenSourceChanges(() =>
														{
															switch (item.CommandStyle)
															{
																default:
																case "Uncheked":
																	listCell.CheckboxButton.SetImage(UIImage.FromBundle("checkbox-unchecked"), UIControlState.Normal);
																	break;
																case "Checked":
																	listCell.CheckboxButton.SetImage(UIImage.FromBundle("checkbox-checked"), UIControlState.Normal);
																	break;
																case "StarUncheked":
																	listCell.CheckboxButton.SetImage(UIImage.FromBundle("star-unchecked"), UIControlState.Normal);
																	break;
																case "StarChecked":
																	listCell.CheckboxButton.SetImage(UIImage.FromBundle("star-checked"), UIControlState.Normal);
																	break;
															}
														})
														);

			listCell.Bindings.Add(new Binding<bool, bool>(item, () => item.IsSelected, listCell, () => listCell.PriceLabel.Hidden, BindingMode.OneWay)
								  .ConvertSourceToTarget((bool arg) => !arg));
			listCell.Bindings.Add(new Binding<bool, bool>(item, () => item.IsSelected, listCell, () => listCell.QuantityOnDisplayLabel.Hidden, BindingMode.OneWay)
									.ConvertSourceToTarget((bool arg) => !arg));
			listCell.Bindings.Add(new Binding<bool, bool>(item, () => item.IsSelected, listCell, () => listCell.QuantitySpecialPlacementLabel.Hidden, BindingMode.OneWay)
								  .ConvertSourceToTarget((bool arg) => !arg));
			listCell.Bindings.Add(new Binding<bool, bool>(item, () => item.IsSelected, listCell, () => listCell.IsInPromoLabel.Hidden, BindingMode.OneWay)
								  .ConvertSourceToTarget((bool arg) => !arg));
			listCell.Bindings.Add(new Binding<bool, bool>(item, () => item.IsSelected, listCell, () => listCell.QuantityWithPOSMLabel.Hidden, BindingMode.OneWay)
								  .ConvertSourceToTarget((bool arg) => !arg));
			listCell.Bindings.Add(new Binding<bool, bool>(item, () => item.IsSelected, listCell, () => listCell.PriceTextField.Hidden, BindingMode.OneWay)
								  .ConvertSourceToTarget((bool arg) => !arg));
			listCell.Bindings.Add(new Binding<bool, bool>(item, () => item.IsSelected, listCell, () => listCell.QuantityOnDisplayTextField.Hidden, BindingMode.OneWay)
								  .ConvertSourceToTarget((bool arg) => !arg));
			listCell.Bindings.Add(new Binding<bool, bool>(item, () => item.IsSelected, listCell, () => listCell.IsInPromoSwitch.Hidden, BindingMode.OneWay)
								  .ConvertSourceToTarget((bool arg) => !arg));
			listCell.Bindings.Add(new Binding<bool, bool>(item, () => item.IsSelected, listCell, () => listCell.WithPOSMSwitch.Hidden, BindingMode.OneWay)
								  .ConvertSourceToTarget((bool arg) => !arg));
			listCell.Bindings.Add(new Binding<bool, bool>(item, () => item.IsSelected, listCell, () => listCell.SpecialPlacementSwitch.Hidden, BindingMode.OneWay)
								  .ConvertSourceToTarget((bool arg) => !arg));
			listCell.Bindings.Add(new Binding<bool, bool>(item, () => item.IsSelected, listCell, () => listCell.OptionalDataButton.Hidden, BindingMode.OneWay)
								  .ConvertSourceToTarget((bool arg) => !arg));

			listCell.Bindings.Add(new Binding<string, string>(item, () => item.Price, listCell, () => listCell.PriceTextField.Text, BindingMode.TwoWay));
			listCell.Bindings.Add(new Binding<string, string>(item, () => item.QuantityInEvidence, listCell, () => listCell.QuantityOnDisplayTextField.Text, BindingMode.TwoWay));
			listCell.Bindings.Add(new Binding<string, bool>(item, () => item.InPromo, listCell, () => listCell.IsInPromoSwitch.On, BindingMode.TwoWay)
								  .ConvertTargetToSource((bool arg) =>
														{
															return arg ? "1" : "0";
														})
								  .ConvertSourceToTarget((string arg) =>
														{
															return ((string.IsNullOrWhiteSpace(arg)) || (arg == "0")) ? false : true;
														})
								 );

			listCell.Bindings.Add(new Binding<bool, bool>(item, () => item.IsSpecial, listCell, () => listCell.SpecialPlacementSwitch.On, BindingMode.TwoWay));
			listCell.Bindings.Add(new Binding<bool, bool>(item, () => item.HasPos, listCell, () => listCell.WithPOSMSwitch.On, BindingMode.TwoWay));
			listCell.Bindings.Add(new Binding<bool, bool>(item, () => item.IsFavorite, listCell, () => listCell.IsPreferredLabel.Hidden)
								  .ConvertSourceToTarget((bool arg) => !arg));

			listCell.Bindings.Add(new Binding<string, string>(item, () => item.ErrorMessage).WhenSourceChanges(() =>
			{
				listCell.ErrorMessageLabel.Text = item.ErrorMessage;
				if (item.ErrorMessage != null)
				{
					listCell.BringSubviewToFront(listCell.ErrorMessageLabel);
				}
				else
				{
					listCell.SendSubviewToBack(listCell.ErrorMessageLabel);
				}
			}));

			listCell.optionalDataAction = (UIView sender) =>
			{
				this.ownerController.optionalDataPopoverController.ShowPopover(sender, new CGSize(400f, 330f), item);
			};

			listCell.checkboxAction = (UIView sender) =>
			{
				if (viewModel.ToggleViewedCommand.CanExecute(item))
				{
					viewModel.ToggleViewedCommand.Execute(item);
				}
			};

			//Debug.WriteLine("After FloorspaceElectroluxTableViewSource.BindCell.End " + (DateTime.Now - startTime).TotalSeconds.ToString());
			//startTime = DateTime.Now;
			return listCell;
		}

		public override bool CanEditRow(UITableView tableView, NSIndexPath indexPath)
		{
			return true;
		}

		public override void CommitEditingStyle(UITableView tableView,
												UITableViewCellEditingStyle editingStyle,
												NSIndexPath indexPath)
		{
			switch (editingStyle)
			{
				case UITableViewCellEditingStyle.Delete:
					this.viewModel.DeleteUserItemCommand.Execute(this.dataSource.ToList()[indexPath.Row]);
					break;
			}
		}

		public override UITableViewCellEditingStyle EditingStyleForRow(UITableView tableView,
																		NSIndexPath indexPath)
		{
			return UITableViewCellEditingStyle.Delete;
		}

		public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
		{
		}
	}
}
