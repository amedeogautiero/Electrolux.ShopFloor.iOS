// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using Electrolux.ShopFloor.iOS.ViewControllers;
using Electrolux.ShopFloor.Middleware.Manager;
using Electrolux.ShopFloor.Mvvm.ViewModels.EditingAreas;
using Electrolux.ShopFloor.Mvvm.ViewModels.Units;
using Foundation;
using GalaSoft.MvvmLight.Helpers;
using UIKit;

namespace Electrolux.ShopFloor.iOS
{
	public partial class FSElectroluxOptionalDataViewController : OptionalDataBaseViewController<ElectroluxFloorSpaceSalesUnit, ElectroluxFloorSpaceViewModel>
	{
		private PopoverViewController<KitchenUnit> kitchenPopoverController;

		public FSElectroluxOptionalDataViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			this.qtyOnStockLabel.Text = TranslatorManager.GetInstance().GetString("# on stock");
			this.kitchenLabel.Text = TranslatorManager.GetInstance().GetString("Kitchen");
			this.headerLabel.Text = TranslatorManager.GetInstance().GetString("Floorspace Electrolux optional data");
			this.saveButton.SetTitle(TranslatorManager.GetInstance().GetString("OK"), UIControlState.Normal);
			this.cancelButton.SetTitle(TranslatorManager.GetInstance().GetString("Cancel"), UIControlState.Normal);

			this.saveButton.TouchUpInside += (object sender, EventArgs e) =>
			{
				AreaViewModel.SelectedUserItem = Item;
				AreaViewModel.QuantityStock = Item.QuantityInStock;
				if (AreaViewModel.CommitOptionalDataPanelCommand.CanExecute(null))
				{
					AreaViewModel.CommitOptionalDataPanelCommand.Execute(null);
				}
				Owner.DismissPopover();
			};

			this.cancelButton.TouchUpInside += (object sender, EventArgs e) =>
			{
				if (AreaViewModel.CloseOptionalDataPanelCommand.CanExecute(null))
				{
					AreaViewModel.CloseOptionalDataPanelCommand.Execute(null);
				}
				Owner.DismissPopover();
			};
		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);

			if (this.AreaViewModel != null)
			{
                AreaViewModel.SelectedKitchen = Item.Kitchen;
				KeepBindingInMemory(new Binding<string, string>(Item, () => Item.Kitchen.Text, this, () => this.kitchenTextField.Text));
				KeepBindingInMemory(new Binding<string, string>(Item, () => Item.QuantityInStock, this, () => this.qtyOnStockTextField.Text, BindingMode.TwoWay));
				KeepBindingInMemory(new Binding<string, string>(Item, () => Item.ErrorMessage, this, () => this.qtyOnStockMessage.Text, BindingMode.TwoWay));

				this.kitchenTextField.ShouldBeginEditing += (UITextField textField) =>
					{
						kitchenPopoverController.ShowPopover(textField);
						return false;
					};

				kitchenPopoverController = new PopoverViewController<KitchenUnit>(
					this.AreaViewModel.Kitchens,
					new CGSize(this.kitchenTextField.Frame.Size.Width, 320f),
					"KitchenTableViewCell",
					UIPopoverArrowDirection.Any,
					(UITableViewCell cell) =>
					{
						if (cell is KitchenTableViewCell)
						{
							KitchenUnit item = ((KitchenTableViewCell)cell).Item;
							this.AreaViewModel.SelectedKitchen = item;
							this.kitchenTextField.Text = item.Text;
							kitchenPopoverController.DismissPopover();
						}
					}
				);
			}
		}

		public override void ViewDidDisappear(bool animated)
		{
			base.ViewDidDisappear(animated);

			ClearAndDetachBindings();
		}
	}
}
