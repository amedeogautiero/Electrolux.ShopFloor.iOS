// This file has been autogenerated from a class added in the UI designer.

using System;
using Electrolux.ShopFloor.iOS.ViewControllers;
using Electrolux.ShopFloor.Middleware.Contract;
using Electrolux.ShopFloor.Mvvm.ViewModels;
using Foundation;
using GalaSoft.MvvmLight.Helpers;
//using HockeyApp.iOS;
using UIKit;

namespace Electrolux.ShopFloor.iOS
{
	public partial class SynchronizationViewController : BaseViewController<SettingsViewModel>
	{
		public SynchronizationViewController (IntPtr handle) : base (handle)
		{
		}

		public override void RegisterBindings()
		{
			base.RegisterBindings();

			KeepBindingInMemoryLocal(new Binding<string, string>(ViewModel, () => ViewModel.Username, this, () => this.usernameLabel.Text));
			KeepBindingInMemoryLocal(new Binding<string, string>(ViewModel, () => ViewModel.Role, this, () => this.roleLabel.Text));
			KeepBindingInMemoryLocal(new Binding<string, string>(ViewModel, () => ViewModel.LastUpdate, this, () => this.lastUpdateLabel.Text));
			KeepBindingInMemoryLocal(new Binding<string, string>(ViewModel, () => ViewModel.Version, this, () => this.applicationVersionLabel.Text));
			KeepBindingInMemoryLocal(new Binding<string, string>(ViewModel, () => ViewModel.UserToken, this, () => this.tokenLabel.Text));
			KeepBindingInMemoryLocal(new Binding<string, string>(ViewModel, () => ViewModel.Status, this, () => this.syncMessageLabel.Text));
			KeepBindingInMemoryLocal(new Binding<string, string>(ViewModel, () => ViewModel.EndpointUrl, this, () => this.endpointLabel.Text));
			this.KeepBindingInMemoryLocal(new Binding<bool, bool>(ViewModel, () => ViewModel.IsStaging, this, () => this.isStagingLabel.Hidden)
							  .ConvertSourceToTarget((arg) => !arg));
			this.KeepBindingInMemoryLocal(new Binding<bool, bool>(ViewModel, () => ViewModel.IsStaging, this, () => this.feedbackButton.Hidden)
							  .ConvertSourceToTarget((arg) => !arg));

			KeepBindingInMemoryLocal(new Binding<bool, bool>(ViewModel, () => ViewModel.IsProgressVisible, this, () => this.syncProgressView.Hidden).ConvertSourceToTarget((arg) => !arg));
			KeepBindingInMemoryLocal(new Binding<int, float>(ViewModel, () => ViewModel.Progress, this, () => this.syncProgressView.Progress).ConvertSourceToTarget((arg) => (float)(arg/100f)));
            KeepBindingInMemoryLocal(new Binding<string, string>(ViewModel, () => ViewModel.CachePreloadMessage, this, () => this.syncMessageLabel.Text));
            KeepBindingInMemoryLocal(new Binding<double, float>(ViewModel, () => ViewModel.CachePreloadProgress, this, () => this.syncProgressView.Progress));
		}

		public override void RegisterCommands()
		{
			base.RegisterCommands();

			this.syncButton.SetCommand(ViewModel.SyncCommand);
			this.closeButton.SetCommand(ViewModel.NavigateBackCommand);
			this.feedbackButton.TouchUpInside += (object sender, EventArgs e) =>
			{
				//IAppConfig config = RegistryService.Instance.Resolve<IAppConfig>();
    //            if (config.IsHockeyAppActive)
    //            {
				//	BITHockeyManager.SharedHockeyManager.FeedbackManager.ShowFeedbackListView();
				//}
				//#if !PROD
				//				BITHockeyManager.SharedHockeyManager.FeedbackManager.ShowFeedbackListView();
				//#endif
			};
		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);
			UIApplication.SharedApplication.IdleTimerDisabled = true;
		}

		public override void ViewDidDisappear(bool animated)
		{
			base.ViewDidDisappear(animated);
			UIApplication.SharedApplication.IdleTimerDisabled = false;
		}
	}
}
