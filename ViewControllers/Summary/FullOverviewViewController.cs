// This file has been autogenerated from a class added in the UI designer.

using System;
using Electrolux.ShopFloor.iOS.ViewControllers;
using Electrolux.ShopFloor.Middleware.Manager;
using Electrolux.ShopFloor.Mvvm.ViewModels.EditingAreas;
using Electrolux.ShopFloor.Mvvm.ViewModels.Units;
using Foundation;
using GalaSoft.MvvmLight.Helpers;
using UIKit;
using System.Linq;
using Electrolux.ShopFloor.Middleware.Model;

namespace Electrolux.ShopFloor.iOS
{
	public partial class FullOverviewViewController : DetailBaseViewController<SummaryViewModel>, IUITableViewDataSource, IUITableViewDelegate
	{
		public FullOverviewViewController (IntPtr handle) : base (handle)
		{
		}

		public override void Translations()
		{
			// Comments
			this.commentCommentsHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Comments");
			this.commentHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Comments");
			// Competitors Activities
			this.competitorsActivitiesHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Competitors Activities");
			this.competitorsActivitiesModelHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Model/Category");
			this.competitorsActivitiesBrandHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Brand");
			this.competitorsActivitiesTimeSpentHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Time Spent");
			this.competitorsActivitiesCompetitorsActivityHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Activity");
			this.competitorsActivitiesReasonHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Reason");
			this.competitorsActivitiesDescriptionHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Description");
			// Electrolux Activities
			this.electroluxActivitiesHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Electrolux Activities");
			this.electroluxActivitiesActivityHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Electrolux Activities");
			this.electroluxActivitiesActivityReasonHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Reason");
			this.electroluxActivitiesDescriptionHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Description");
			this.electroluxActivitiesModelCategoryHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Model/Category");
			this.electroluxActivitiesBrandHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Brand");
			this.electroluxActivitiesTimeSpentHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Time Spent");
			// Floorspace Competitors
			this.fsCompetitorsHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Floor space - Competitors Products");
			//this.fsCompetitorsModelHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Model/Product Set/Category");
			this.fsCompetitorsBrandHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Brand");
			this.fsCompetitorsQtyOnDisplayHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Quantity On Display");
			this.fsCompetitorsQtyWithPOSMaterialHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Quantity With POS Material");
			this.fsCompetitorsQtySpecialPlacementHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Quantity In Special Placement");
			//this.fsCompetitorsPriceHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Price");
			//this.fsCompetitorsKitchenHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Kitchen");
			this.fsCompetitorsProductGroupHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Product Group");
			this.fsCompetitorsQtyOnStockHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Quantity On Stock");
			// Floorspace Electrolux
			this.fsElectroluxHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Floor space - Electrolux Products");
			this.fsElectroluxBrandHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Brand");
			this.fsElectroluxKitchenHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Kitchen");
			this.fsElectroluxModelHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Model");
			this.fsElectroluxPriceHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Price");
			this.fsElectroluxQuantityOnDisplayHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Quantity On Display");
			this.fsElectroluxQuantitySpecialPlacementHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Quantity In Special Placement");
			this.fsElectroluxQuantityWithPOSMHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Quantity With POS Material");
			// Kilometres
			// TODO
			// Kitchen
			this.kitchenHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Kitchen");
			this.kitchenKitchenNameHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Kitchen name");
			this.kitchenTotalAppliancesHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Total appliances");
			this.kitchenElectroluxAppliancesHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Total Electrolux appliances");
			this.kitchenDescriptionHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Description");
			// Photos
			this.photosHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Photos");
			this.photosBrandHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Competitor/Electrolux Brand");
			this.photosQualityHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Product Performance");
			this.photosSubjectHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Photo Refer To");
			this.photosDescriptionHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Description");
			// POSM Activities
			this.POSMActivitiesHeaderLabel.Text = TranslatorManager.GetInstance().GetString("POSM Activities");
			this.POSMActivitiesModelCategoryHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Model/Category");
			this.POSMActivitiesBrandHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Brand");
			this.POSMActivitiesPosmMaterialHeaderLabel.Text = TranslatorManager.GetInstance().GetString("POSM Material");
			this.POSMActivitiesPosmCampaignHeaderLabel.Text = TranslatorManager.GetInstance().GetString("POSM Campaign");
			this.POSMActivitiesPosmActivityHeaderLabel.Text = TranslatorManager.GetInstance().GetString("POSM Activity");
			// Product feedback
			this.productFeedbackHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Product Feedback");
			this.productFeedbackModelCategoryHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Model/Category");
			this.productFeedbackBrandHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Brand");
			this.productFeedbackDescriptionHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Description");
			// Sellout
			this.selloutHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Sell-out Models");
			this.selloutModelProductSetHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Model/Product Set");
			this.selloutPncHeaderLabel.Text = TranslatorManager.GetInstance().GetString("PNC");
			this.selloutQuantityHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Quantity");
			this.selloutPriceHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Price");
			this.selloutInEvidenceHeaderLabel.Text = TranslatorManager.GetInstance().GetString("On Display");
			this.selloutInStockHeaderLabel.Text = TranslatorManager.GetInstance().GetString("On Stock");
			// Shop Actvities
			this.shopActivitiesHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Shop Activities");
			this.shopActivitiesModelHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Model/Category");
			this.shopActivitiesBrandHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Brand");
			this.shopActivitiesTimeSpentHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Time Spent");
			this.shopActivitiesShopActivityHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Shop Activities");
			this.shopActivitiesReasonHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Store Reason");
			this.shopActivitiesDescriptionHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Description");
			// Shop Information
			this.shopInformationHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Shop Information");
			this.shopInformationNumbersOfCustomersContactedHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Customer Contacted");
			this.shopInformationNumebersOfCustomersWhoHavePurchasedHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Customer Purchased");
			this.shopInformationDailyTrafficHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Daily Traffic");
			this.shopInformationWeatherHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Weather");
			// Training
			this.trainingHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Training");
			this.trainingMethodHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Training Method");
			this.trainingTrainingTypeHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Main Focus");
			this.trainingAudienceHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Training Audience");
			this.trainingTimeSpentHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Time Spent");
			this.trainingNumberOfParticipantsHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Number Of Participants");
			this.trainingDescriptionHeaderLabel.Text = TranslatorManager.GetInstance().GetString("Description");
		}

		public override void ConfigureArea()
		{
			base.ConfigureArea();
			if (tableView.DataSource == null)
			{
				tableView.WeakDataSource = this;
				tableView.WeakDelegate = this;
			}
			this.tableView.ReloadData();
		}

		#region IUITableViewDataSource

		[Export("numberOfSectionsInTableView:")]
		public nint NumberOfSections(UITableView tableView)
		{
			nint numberOfSections = 16;
			return numberOfSections;
		}

		public nint RowsInSection(UITableView tableView, nint section)
		{
			switch ((eSection)(int)section)
			{
				case eSection.SellOutModels:
					if (AreaViewModel.HasSoldProducts)
						return AreaViewModel.Host.AreaSoldProducts.Items.Count();
					break;
				case eSection.ShopInformation:
					if (AreaViewModel.HasShopInformations)
						return 1;
					break;
				case eSection.ShopActivities:
					if (AreaViewModel.HasShopActivities)
						return AreaViewModel.Host.AreaShopActivities.Items.Count();
					break;
				case eSection.ElectroluxActivities:
					if (AreaViewModel.HasElectroluxActivities)
						return AreaViewModel.Host.AreaElectroluxActivities.Items.Count();
					break;
				case eSection.CompetitorsActivities:
					if (AreaViewModel.HasCompetitorsActivities)
						return AreaViewModel.Host.AreaCompetitorsActivities.Items.Count();
					break;
				case eSection.POSMActivities:
					if (AreaViewModel.HasPosmActivities)
						return AreaViewModel.Host.AreaPosmActivities.Items.Count();
					break;
				case eSection.Training:
					if (AreaViewModel.HasTraining)
						return 1;
					break;
				case eSection.ProductFeedback:
					if (AreaViewModel.HasFeedback)
						return AreaViewModel.Host.AreaFeedback.Items.Count();
					break;
				case eSection.Photos:
					if (AreaViewModel.HasPhotos)
						return AreaViewModel.Host.AreaPhotos.Items.Count();
					break;
				case eSection.Kitchen:
					if (AreaViewModel.HasKitchen)
						return AreaViewModel.Host.AreaKitchen.Items.Count();
					break;
				case eSection.FloorSpace_ElectroluxProducts:
					if (AreaViewModel.HasElectroluxFloorSpace)
						return AreaViewModel.Host.AreaElectroluxFloorSpace.UserItems.Count();
					break;
				case eSection.FloorSpace_CompetitorsProducts:
					if (AreaViewModel.HasCompetitorsFloorSpace)
						return AreaViewModel.Host.AreaCompetitorsFloorSpace.ItemsGroupped.Count();
					break;
				case eSection.Kilometres:
					break;
				case eSection.Comments:
					if (AreaViewModel.HasComments)
						return 1;
					break;
			}
			return 0;
		}

		public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{
			switch ((eSection)indexPath.Section)
			{
				case eSection.SellOutModels:
					{
						if (AreaViewModel.HasSoldProducts)
						{
							SelloutTableViewCell cell = (SelloutTableViewCell)tableView.DequeueReusableCell("SelloutTableViewCell", indexPath);
							cell.ModelProductSetLabel.Text = ((SoldProductUnit)AreaViewModel.Host.AreaSoldProducts.Items[indexPath.Row]).Model;
							cell.QuantityLabel.Text = ((SoldProductUnit)AreaViewModel.Host.AreaSoldProducts.Items[indexPath.Row]).Unit.Qty.ToString();
							cell.InStockLabel.Text = ((SoldProductUnit)AreaViewModel.Host.AreaSoldProducts.Items[indexPath.Row]).InStock;
							cell.InEvidenceLabel.Text = ((SoldProductUnit)AreaViewModel.Host.AreaSoldProducts.Items[indexPath.Row]).InEvidence;
							float? price = ((SoldProductUnit)AreaViewModel.Host.AreaSoldProducts.Items[indexPath.Row]).Unit.Price;
							cell.PriceLabel.Text = price.HasValue ? price.Value.ToString(ViewModel.ApplicationController.Culture) : "0";
							cell.PncLabel.Text = ((SoldProductUnit)AreaViewModel.Host.AreaSoldProducts.Items[indexPath.Row]).Pnc;
							return cell;
						}
						break;
					}
				case eSection.ShopInformation:
					{
						if (AreaViewModel.HasShopInformations)
						{
							ShopInformationTableViewCell cell = (ShopInformationTableViewCell)tableView.DequeueReusableCell("ShopInformationTableViewCell", indexPath);
							cell.CustomerContactedLabel.Text = AreaViewModel.Host.AreaShopInfo.TotalCustomers;
							cell.CustomerPurchasedLabel.Text = AreaViewModel.Host.AreaShopInfo.TotalCustomersWhoBought;
							cell.DailyTrafficLabel.Text = AreaViewModel.Host.AreaShopInfo.SelectedTraffic.Text;
							cell.WeatherLabel.Text = AreaViewModel.Host.AreaShopInfo.SelectedWeather.Text;
							return cell;
						}
						break;
					}
				case eSection.ShopActivities:
					{
						if (AreaViewModel.HasShopActivities)
						{
							ShopActivitiesTableViewCell cell = (ShopActivitiesTableViewCell)tableView.DequeueReusableCell("ShopActivitiesTableViewCell", indexPath);
							cell.ModelLabel.Text = ((ShopActivityUnit)AreaViewModel.Host.AreaShopActivities.Items[indexPath.Row]).ModelText;
							cell.BrandLabel.Text = ((ShopActivityUnit)AreaViewModel.Host.AreaShopActivities.Items[indexPath.Row]).Brand.Text;
							cell.ReasonLabel.Text = ((ShopActivityUnit)AreaViewModel.Host.AreaShopActivities.Items[indexPath.Row]).Reason.Text;
							cell.TimeSpentLabel.Text = ((ShopActivityUnit)AreaViewModel.Host.AreaShopActivities.Items[indexPath.Row]).TimeSpent.Text;
							cell.ShopActivityLabel.Text = ((ShopActivityUnit)AreaViewModel.Host.AreaShopActivities.Items[indexPath.Row]).Activity.Text;
							cell.DescriptionLabel.Text = ((ShopActivityUnit)AreaViewModel.Host.AreaShopActivities.Items[indexPath.Row]).Description;
							return cell;
						}
						break;
					}
				case eSection.ElectroluxActivities:
					{
						if (AreaViewModel.HasElectroluxActivities)
						{
							ElectroluxActivitiesTableViewCell cell = (ElectroluxActivitiesTableViewCell)tableView.DequeueReusableCell("ElectroluxActivitiesTableViewCell", indexPath);
							cell.ModelCategoryLabel.Text = ((ElectroluxActivityUnit)AreaViewModel.Host.AreaElectroluxActivities.Items[indexPath.Row]).ModelText;
							cell.BrandLabel.Text = ((ElectroluxActivityUnit)AreaViewModel.Host.AreaElectroluxActivities.Items[indexPath.Row]).Brand.Text;
							cell.ActivityLabel.Text = ((ElectroluxActivityUnit)AreaViewModel.Host.AreaElectroluxActivities.Items[indexPath.Row]).Activity.Text;
							cell.ActivityReasonLabel.Text = ((ElectroluxActivityUnit)AreaViewModel.Host.AreaElectroluxActivities.Items[indexPath.Row]).Reason.Text;
							cell.DescriptionLabel.Text = ((ElectroluxActivityUnit)AreaViewModel.Host.AreaElectroluxActivities.Items[indexPath.Row]).Description;
							cell.TimeSpentlabel.Text = ((ElectroluxActivityUnit)AreaViewModel.Host.AreaElectroluxActivities.Items[indexPath.Row]).TimeSpent.Text;
							return cell;
						}
						break;
					}
				case eSection.CompetitorsActivities:
					{
						if (AreaViewModel.HasCompetitorsActivities)
						{
                            CompetitorActivityUnit unit = (CompetitorActivityUnit)AreaViewModel.Host.AreaCompetitorsActivities.Items[indexPath.Row];
							CompetitorsActivitiesTableViewCell cell = (CompetitorsActivitiesTableViewCell)tableView.DequeueReusableCell("CompetitorsActivitiesTableViewCell", indexPath);
							cell.ModelLabel.Text = unit.ModelText;
							cell.BrandLabel.Text = unit.Brand.Text;
							cell.ReasonLabel.Text = unit.Reason.Text;
							cell.TimeSpentLabel.Text = unit.TimeSpent.Text;
							cell.CompetitorsActivityLabel.Text = unit.Activity.Text;
							cell.DescriptionLabel.Text = unit.Description;
							return cell;
						}
						break;
					}
				case eSection.POSMActivities:
					{
						if (AreaViewModel.HasPosmActivities)
						{
							PosmActivitiesTableViewCell cell = (PosmActivitiesTableViewCell)tableView.DequeueReusableCell("PosmActivitiesTableViewCell", indexPath);
							cell.BrandLabel.Text = ((PosmActivityUnit)AreaViewModel.Host.AreaPosmActivities.Items[indexPath.Row]).Brand.Text;
							cell.PosmActivityLabel.Text = ((PosmActivityUnit)AreaViewModel.Host.AreaPosmActivities.Items[indexPath.Row]).Activity.Text;
							cell.ModelCategoryLabel.Text = ((PosmActivityUnit)AreaViewModel.Host.AreaPosmActivities.Items[indexPath.Row]).ModelText;
							cell.PosmMaterialLabel.Text = ((PosmActivityUnit)AreaViewModel.Host.AreaPosmActivities.Items[indexPath.Row]).Material.Text;
							cell.PosmCampaignLabel.Text = ((PosmActivityUnit)AreaViewModel.Host.AreaPosmActivities.Items[indexPath.Row]).Campaign.Text;
							return cell;
						}
						break;
					}
				case eSection.Training:
					{
						if (AreaViewModel.HasTraining)
						{
							TrainingTableViewCell cell = (TrainingTableViewCell)tableView.DequeueReusableCell("TrainingTableViewCell", indexPath);
							cell.NumberOfParticipantsLabel.Text = AreaViewModel.Host.AreaTraining.TotalPartecipants;
							cell.TrainingAudienceLabel.Text = AreaViewModel.Host.AreaTraining.SelectedTrainingAudience.Text;
							cell.TrainingMethodLabel.Text = AreaViewModel.Host.AreaTraining.SelectedTrainingMethod.Text;
							cell.MainFocusLabel.Text = AreaViewModel.Host.AreaTraining.SelectedTrainingType.Text;
							cell.TimeSpentLabel.Text = AreaViewModel.Host.AreaTraining.SelectedSpentTime.Text;
							cell.DescriptionLabel.Text = AreaViewModel.Host.AreaTraining.Description;
							return cell;
						}
						break;
					}
				case eSection.ProductFeedback:
					{
						if (AreaViewModel.HasFeedback)
						{
							ProductFeedbackTableViewCell cell = (ProductFeedbackTableViewCell)tableView.DequeueReusableCell("ProductFeedbackTableViewCell", indexPath);
							cell.BrandLabel.Text = ((ProductFeedbackUnit)AreaViewModel.Host.AreaFeedback.Items[indexPath.Row]).Brand.Text;
							cell.ModelCategoryLabel.Text = ((ProductFeedbackUnit)AreaViewModel.Host.AreaFeedback.Items[indexPath.Row]).ModelText;
							cell.DescriptionLabel.Text = ((ProductFeedbackUnit)AreaViewModel.Host.AreaFeedback.Items[indexPath.Row]).Description;
							return cell;
						}
						break;
					}
				case eSection.Photos:
					{
						if (AreaViewModel.HasPhotos)
						{
							PhotosTableViewCell cell = (PhotosTableViewCell)tableView.DequeueReusableCell("PhotosTableViewCell", indexPath);
							cell.BrandLabel.Text = ((PhotoUnit)AreaViewModel.Host.AreaPhotos.Items[indexPath.Row]).Brand.Text;
							cell.SubjectLabel.Text = ((PhotoUnit)AreaViewModel.Host.AreaPhotos.Items[indexPath.Row]).ReferTo.Text;
							cell.QualityLabel.Text = ((PhotoUnit)AreaViewModel.Host.AreaPhotos.Items[indexPath.Row]).QualityLevel.Text;
							cell.DescriptionLabel.Text = ((PhotoUnit)AreaViewModel.Host.AreaPhotos.Items[indexPath.Row]).Description;
							return cell;
						}
						break;
					}
				case eSection.Kitchen:
					{
						if (AreaViewModel.HasKitchen)
						{
							KitchenListTableViewCell cell = (KitchenListTableViewCell)tableView.DequeueReusableCell("KitchenListTableViewCell", indexPath);
							cell.KitchenNameLabel.Text = AreaViewModel.Host.AreaKitchen.Items[indexPath.Row].Unit.KitchenName;
							cell.TotalAppliancesLabel.Text = AreaViewModel.Host.AreaKitchen.Items[indexPath.Row].Unit.AppliancesTotal.ToString();
							cell.ElectroluxAppliancesLabel.Text = AreaViewModel.Host.AreaKitchen.Items[indexPath.Row].Unit.AppliancesElectrolux.ToString();
							cell.DescriptionLabel.Text = AreaViewModel.Host.AreaKitchen.Items[indexPath.Row].Unit.KitchenDescription;
							return cell;
						}
						break;
					}
				case eSection.FloorSpace_ElectroluxProducts:
					{
						if (AreaViewModel.HasElectroluxFloorSpace)
						{
							FullOverviewFloorspaceElectroluxTableViewCell cell = (FullOverviewFloorspaceElectroluxTableViewCell)tableView.DequeueReusableCell("FullOverviewFloorspaceElectroluxTableViewCell", indexPath);
							cell.ModelLabel.Text = ((ElectroluxFloorSpaceSalesUnit)AreaViewModel.Host.AreaElectroluxFloorSpace.UserItems[indexPath.Row]).Name;
							cell.BrandLabel.Text = ((ElectroluxFloorSpaceSalesUnit)AreaViewModel.Host.AreaElectroluxFloorSpace.UserItems[indexPath.Row]).Brand;
							cell.PriceLabel.Text = ((ElectroluxFloorSpaceSalesUnit)AreaViewModel.Host.AreaElectroluxFloorSpace.UserItems[indexPath.Row]).Price;
							KitchenUnit kitchen = ((ElectroluxFloorSpaceSalesUnit)AreaViewModel.Host.AreaElectroluxFloorSpace.UserItems[indexPath.Row]).Kitchen;
							if (kitchen != null)
							{
								cell.KitchenLabel.Text = kitchen.Text;
							}
							cell.QtyOnDisplayLabel.Text = ((ElectroluxFloorSpaceSalesUnit)AreaViewModel.Host.AreaElectroluxFloorSpace.UserItems[indexPath.Row]).QuantityInEvidenceValue.ToString();
							cell.QtyWithPOSMaterialLabel.Text = ((ElectroluxFloorSpaceSalesUnit)AreaViewModel.Host.AreaElectroluxFloorSpace.UserItems[indexPath.Row]).QuantityWithPosMaterial.ToString();
							cell.QtySpecialPlacementLabel.Text = ((ElectroluxFloorSpaceSalesUnit)AreaViewModel.Host.AreaElectroluxFloorSpace.UserItems[indexPath.Row]).QtyInSpecialPositions.ToString();
							return cell;
						}
						break;
					}
				case eSection.FloorSpace_CompetitorsProducts:
					{
						if (AreaViewModel.HasCompetitorsFloorSpace)
						{
							FullOverviewFloorspaceCompetitorsTableViewCell cell = (FullOverviewFloorspaceCompetitorsTableViewCell)tableView.DequeueReusableCell("FullOverviewFloorspaceCompetitorsTableViewCell", indexPath);
							//cell.ModelLabel.Text = AreaViewModel.Host.AreaCompetitorsFloorSpace.Items[indexPath.Row].Unit.ModelText;
							BrandUnit brand = ((FloorSpaceCompetitorUnit)AreaViewModel.Host.AreaCompetitorsFloorSpace.ItemsGroupped[indexPath.Row]).Brand;
							if (brand != null)
							{
								cell.BrandLabel.Text = brand.Text;
							}
							//float? price = AreaViewModel.Host.AreaCompetitorsFloorSpace.Items[indexPath.Row].Unit.Price;
							//cell.PriceLabel.Text = (price.HasValue) ? price.Value.ToString(ViewModel.ApplicationController.Culture) : "0";
							//cell.KitchenLabel.Text = ((FloorSpaceCompetitorUnit)AreaViewModel.Host.AreaCompetitorsFloorSpace.Items[indexPath.Row]).KitchenName;
							cell.QtyOnDisplayLabel.Text = AreaViewModel.Host.AreaCompetitorsFloorSpace.ItemsGroupped[indexPath.Row].QuantityInEvidence.ToString();
							cell.QtyWithPOSMaterialLabel.Text = AreaViewModel.Host.AreaCompetitorsFloorSpace.ItemsGroupped[indexPath.Row].QuantityWithPosMaterial.ToString();
							cell.QtySpecialPlacementLabel.Text = AreaViewModel.Host.AreaCompetitorsFloorSpace.ItemsGroupped[indexPath.Row].QuantitySpecial.ToString();
							cell.ProductGroupLabel.Text = AreaViewModel.Host.AreaCompetitorsFloorSpace.ItemsGroupped[indexPath.Row].Category.Text;
							cell.QtyOnStockLabel.Text = AreaViewModel.Host.AreaCompetitorsFloorSpace.ItemsGroupped[indexPath.Row].QuantityStock.ToString();
							return cell;
						}
						break;
					}
				case eSection.Kilometres:
					break;
				case eSection.Comments:
					if (AreaViewModel.HasComments)
					{
						CommentsTableViewCell cell = (CommentsTableViewCell)tableView.DequeueReusableCell("CommentsTableViewCell", indexPath);
						cell.CommentLabel.Text = AreaViewModel.Host.AreaUserComments.Comment;
						return cell;
					}
					break;
			}

			return null;
		}

		#endregion

		#region IUITableViewDelegate

		[Export("tableView:viewForHeaderInSection:")]
		public UIKit.UIView GetViewForHeader(UIKit.UITableView tableView, System.nint section)
		{
			switch ((eSection)(int)section)
			{
				case eSection.SellOutModels:
					return this.selloutHeaderView;
				case eSection.ShopInformation:
					return this.shopInformationHeaderView;
				case eSection.ShopActivities:
					return this.shopActivitiesHeaderView;
				case eSection.ElectroluxActivities:
					return this.electroluxActivitiesHeaderView;
				case eSection.CompetitorsActivities:
					return this.competitorsActivitiesHeaderView;
				case eSection.POSMActivities:
					return this.posmActivitiesHeaderView;
				case eSection.Training:
					return this.trainingHeaderView;
				case eSection.ProductFeedback:
					return this.productFeedbackHeaderView;
				case eSection.Photos:
					return this.photosHeaderView;
				case eSection.Kitchen:
					return this.kitchenHeaderView;
				case eSection.FloorSpace_ElectroluxProducts:
					return this.floorspaceElectroluxHeaderView;
				case eSection.FloorSpace_CompetitorsProducts:
					return this.floorspaceCompetitorsHeaderView;
				case eSection.Kilometres:
					break;
				case eSection.Comments:
					return this.commentsHeaderView;
			}
			return null;
		}

		[Export("tableView:heightForHeaderInSection:")]
		public System.nfloat GetHeightForHeader(UIKit.UITableView tableView, System.nint section)
		{
			switch ((eSection)(int)section)
			{
				case eSection.SellOutModels:
					if (AreaViewModel.HasSoldProducts)
						return this.selloutHeaderView.Frame.Size.Height;
					break;
				case eSection.ShopInformation:
					if (AreaViewModel.HasShopInformations)
						return this.shopInformationHeaderView.Frame.Size.Height;
					break;
				case eSection.ShopActivities:
					if (AreaViewModel.HasShopActivities)
						return this.shopActivitiesHeaderView.Frame.Size.Height;
					break;
				case eSection.ElectroluxActivities:
					if (AreaViewModel.HasElectroluxActivities)
						return this.electroluxActivitiesHeaderView.Frame.Size.Height;
					break;
				case eSection.CompetitorsActivities:
					if (AreaViewModel.HasCompetitorsActivities)
						return this.competitorsActivitiesHeaderView.Frame.Size.Height;
					break;
				case eSection.POSMActivities:
					if (AreaViewModel.HasPosmActivities)
						return this.posmActivitiesHeaderView.Frame.Size.Height;
					break;
				case eSection.Training:
					if (AreaViewModel.HasTraining)
						return this.trainingHeaderView.Frame.Size.Height;
					break;
				case eSection.ProductFeedback:
					if (AreaViewModel.HasFeedback)
						return this.productFeedbackHeaderView.Frame.Size.Height;
					break;
				case eSection.Photos:
					if (AreaViewModel.HasPhotos)
						return this.photosHeaderView.Frame.Size.Height;
					break;
				case eSection.Kitchen:
					if (AreaViewModel.HasKitchen)
						return this.kitchenHeaderView.Frame.Size.Height;
					break;
				case eSection.FloorSpace_CompetitorsProducts:
					if (AreaViewModel.HasCompetitorsFloorSpace)
						return this.floorspaceCompetitorsHeaderView.Frame.Size.Height;
					break;
				case eSection.FloorSpace_ElectroluxProducts:
					if (AreaViewModel.HasElectroluxFloorSpace)
						return this.floorspaceElectroluxHeaderView.Frame.Size.Height;
					break;
				case eSection.Kilometres:
					break;
				case eSection.Comments:
					if (AreaViewModel.HasComments)
						return this.commentsHeaderView.Frame.Size.Height;
					break;
			}
			return 0;
		}

		#endregion
	}
}
/*
 * 			
 	switch ((eSection)(int)section)
			{
				case eSection.SellOutModels:
					break;
				case eSection.ShopInformation:
					break;
				case eSection.ShopActivities:
					break;
				case eSection.ElectroluxActivities:
					break;
				case eSection.CompetitorsActivities:
					break;
				case eSection.POSMActivities:
					break;
				case eSection.Training:
					break;
				case eSection.ProductFeedback:
					break;
				case eSection.Photos:
					break;
				case eSection.Kitchen:
					break;
				case eSection.FloorSpace_ElectroluxProducts:
					break;
				case eSection.FloorSpace_CompetitorsProducts:
					break;
				case eSection.Kilometres:
					break;
				case eSection.Comments:
					break;
			}

 * */
