    // This file has been autogenerated from a class added in the UI designer.

using System;
using Electrolux.ShopFloor.iOS.ViewControllers;
using Electrolux.ShopFloor.Mvvm.ViewModels.EditingAreas;

using Foundation;
using UIKit;
using Electrolux.ShopFloor.Middleware.Manager;
using GalaSoft.MvvmLight.Helpers;
using CoreGraphics;
using System.Timers;

namespace Electrolux.ShopFloor.iOS
{
	public partial class GeneralInfoViewController : DetailBaseViewController<GeneralInfoViewModel>
	{
		private PopoverViewController<string> storePopoverController;
		private DatePickerPopoverViewController datePickerPopoverController;
		private bool isSales;
		//private GeneralInformationDatesViewController _generalInformationDatesViewController;
		private Timer timer;

		//private GeneralInformationDatesViewController generalInformationDatesViewController
		//{
		//	get
		//	{
		//		if (_generalInformationDatesViewController == null)
		//		{
		//			_generalInformationDatesViewController = ((GeneralInformationDatesViewController)this.ChildViewControllers[0]);
		//		}
		//		return _generalInformationDatesViewController;
		//	}
		//}

		public bool IsSales
		{
			get { return this.isSales; }
			set
			{
				this.isSales = value;
			}
		}

		public GeneralInfoViewController(IntPtr handle) : base(handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			timer = new Timer(1000);
			timer.AutoReset = false;
			timer.Elapsed += (object sender, ElapsedEventArgs e) =>
			{
				InvokeOnMainThread(() =>
				{
					if (this.storeTextField.Text.Length > this.AreaViewModel.ApplicationController.SearchThreshold)
					{
						this.AreaViewModel.ShopName = this.storeTextField.Text;
						storePopoverController.ShowPopover(this.storeTextField);
					}
					else
					{
						storePopoverController.DismissPopover();
					}
				});
			};
		}

		public override void ViewDidDisappear(bool animated)
		{
			base.ViewDidDisappear(animated);
			timer.Stop();
		}

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
        }

		private Binding textFieldToMasterDate;
		public override void RegisterBindingsLocal()
		{
    		if (this.AreaViewModel != null)
			{
				this.KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.CanEdit, () => this.storeTextField.UserInteractionEnabled));
				this.KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.CanEdit, () => this.productTypeSegmentedControl.UserInteractionEnabled));
				this.KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.CanEditInheritedList, () => this.inheritedListSegmentedControl.UserInteractionEnabled));
                				this.KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.MasterDate)
											  .WhenSourceChanges(() =>
				{
					if (this.AreaViewModel.MasterDate.HasValue)
						this.dateTextField.Text = this.AreaViewModel.MasterDate.Value.DateTime.ToShortDateString();
					else
						this.dateTextField.Text = "";
				}));

				textFieldToMasterDate = this.KeepBindingInMemoryLocal(this.SetBinding(() => this.dateTextField.Text)
											  .WhenSourceChanges(() => 
				{
					DateTimeOffset dto = new DateTimeOffset();
					if (DateTimeOffset.TryParse(this.dateTextField.Text, out dto))
						this.AreaViewModel.MasterDate = dto;
					else
						this.AreaViewModel.MasterDate = null;

				}));

				this.KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.ShopName, () => this.storeTextField.Text));
				this.KeepBindingInMemoryLocal(this.SetBinding(() => this.storeTextField.Text).WhenSourceChanges(() =>
				{
					if (this.storeTextField.UserInteractionEnabled)
					{
						timer.Start();
					}
				}));
				this.KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.TotalHours, () => this.hoursTextField.Text, BindingMode.TwoWay));
				this.KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.ShopNameErrorMessage, () => this.storeErrorMessageLabel.Text));
				this.KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.DatesErrorMessage, () => this.datesErrorMessageLabel.Text));
				this.KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.TotalHoursErrorMessage, () => this.hoursErrorMessageLabel.Text));

				this.KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.IsSales, () => this.IsSales));

				this.KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.IsInheritedList)
											  .WhenSourceChanges(() =>
				{
					this.inheritedListSegmentedControl.SelectedSegment = (this.AreaViewModel.IsInheritedList) ? 0 : 1;
				}));

				this.KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.IsNotInheritedList)
											  .WhenSourceChanges(() =>
				{
					this.inheritedListSegmentedControl.SelectedSegment = (this.AreaViewModel.IsNotInheritedList) ? 1 : 0;
				}));

				this.KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.IsEma)
											  .WhenSourceChanges(() =>
				{
					this.productTypeSegmentedControl.SelectedSegment = (this.AreaViewModel.IsEma) ? 0 : 1;
				}));

				this.KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.IsEsa)
											  .WhenSourceChanges(() =>
				{
					this.productTypeSegmentedControl.SelectedSegment = (this.AreaViewModel.IsEsa) ? 1 : 0;
				}));

				this.KeepBindingInMemoryLocal(this.SetBinding(() => this.AreaViewModel.IsDialogVisible)
							  .WhenSourceChanges(() =>
				{
					if (this.AreaViewModel.IsDialogVisible)
					{
						//Create Alert
						var alertController = UIAlertController.Create(this.AreaViewModel.DialogMessage, "", UIAlertControllerStyle.Alert);

						//Add Action
						alertController.AddAction(UIAlertAction.Create(this.AreaViewModel["OK"], UIAlertActionStyle.Default, alert =>
						{
							if (this.AreaViewModel.ConfirmCommand.CanExecute(null))
							{
								this.AreaViewModel.ConfirmCommand.Execute(null);
							}
						}));
						alertController.AddAction(UIAlertAction.Create(this.AreaViewModel["Cancel"], UIAlertActionStyle.Cancel, null));

						// Present Alert
						PresentViewController(alertController, true, null);
					}
				}));
			}
		}

		private void MasterDate_to_DateTextField()
		{
			if (this.AreaViewModel.MasterDate.HasValue)
				this.dateTextField.Text = this.AreaViewModel.MasterDate.Value.DateTime.ToShortDateString();
			else
				this.dateTextField.Text = "";
		}

		private void DateTextField_to_MasterDate()
		{
			DateTimeOffset dto = new DateTimeOffset();
			if (DateTimeOffset.TryParse(this.dateTextField.Text, out dto))
				this.AreaViewModel.MasterDate = dto;
			else
				this.AreaViewModel.MasterDate = null;
		}

		partial void productTypeValueChanged(Foundation.NSObject sender)
		{
			this.AreaViewModel.IsEsa = (this.productTypeSegmentedControl.SelectedSegment == 1);
			this.AreaViewModel.IsEma = (this.productTypeSegmentedControl.SelectedSegment == 0);
		}

		partial void inheritedListValueChanged(Foundation.NSObject sender)
		{
			this.AreaViewModel.IsInheritedList = (this.inheritedListSegmentedControl.SelectedSegment == 0);
			this.AreaViewModel.IsNotInheritedList = (this.inheritedListSegmentedControl.SelectedSegment == 1);
		}

		partial void pickdateButtonAction(Foundation.NSObject sender)
		{
			this.datePickerPopoverController.ShowPopover(sender as UIView);
		}

		public override void Translations()
		{
			this.productTypologyLabel.Text = TranslatorManager.GetInstance().GetString("Product Typology");
			this.inheritedListLabel.Text = TranslatorManager.GetInstance().GetString("Inherited List");
			this.storeLabel.Text = TranslatorManager.GetInstance().GetString("Store");
			this.dateLabel.Text = TranslatorManager.GetInstance().GetString("Date");
			this.hoursLabel.Text = TranslatorManager.GetInstance().GetString("Hours");

			this.inheritedListSegmentedControl.SetTitle(TranslatorManager.GetInstance().GetString("YES"), 0);
			this.inheritedListSegmentedControl.SetTitle(TranslatorManager.GetInstance().GetString("NO"), 1);

			this.productTypeSegmentedControl.SetTitle(TranslatorManager.GetInstance().GetString("EMA"), 0);
			this.productTypeSegmentedControl.SetTitle("WB&SDA", 1);

			this.storeTextField.Placeholder = TranslatorManager.GetInstance().GetString("Mandatory");
		}

		public override void ConfigureArea()
		{
			base.ConfigureArea();

    //        this.storeTextField.ShouldChangeCharacters = (textField, range, replacementString) =>
    //        {
				//var newContent = new NSString(textField.Text).Replace(range, new NSString(replacementString)).ToString();
				//if (newContent.Length > this.AreaViewModel.ApplicationController.SearchThreshold)
				//{
				//	storePopoverController.ShowPopover(this.storeTextField);
				//}
				//else {
				//	storePopoverController.DismissPopover();
				//}
    //            return true;
    //        };

			storePopoverController = new PopoverViewController<string>(this.AreaViewModel.Stores, new CGSize(this.storeTextField.Frame.Size.Width, 320f), "BaseTableViewCell", UIPopoverArrowDirection.Up, (UITableViewCell cell) => 
			{
				if (cell is BaseTableViewCell)
				{
					this.AreaViewModel.ShopName = ((BaseTableViewCell)cell).Item;
				}
				storePopoverController.DismissPopover();
				this.storeTextField.ResignFirstResponder();
			});

			datePickerPopoverController = new DatePickerPopoverViewController(new CGSize(320f, 480f), UIPopoverArrowDirection.Left, (DateTime date) =>
			{
				this.dateTextField.Text = date.ToShortDateString();
				textFieldToMasterDate.ForceUpdateValueFromSourceToTarget();
				datePickerPopoverController.DismissPopover();
			});

			this.dateTextField.ShouldBeginEditing += (UITextField textField) =>
			{
				datePickerPopoverController.ShowPopover(textField);
				return false;
			};
            		}
	}
}
